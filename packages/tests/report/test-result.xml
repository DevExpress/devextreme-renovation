<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="Mocha Tests" time="7.6980" tests="1084" failures="0" skipped="2">
  <testsuite name="Root Suite" timestamp="2021-11-25T09:16:21" tests="0" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="angular-generation" timestamp="2021-11-25T09:16:21" tests="86" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/angular-generation.test.ts" time="2.0860" failures="0">
    <testcase name="angular-generation class" time="0.0560" classname="class">
    </testcase>
    <testcase name="angular-generation external-layout" time="0.0800" classname="external-layout">
    </testcase>
    <testcase name="angular-generation inner-layout" time="0.0250" classname="inner-layout">
    </testcase>
    <testcase name="angular-generation inner-component" time="0.0230" classname="inner-component">
    </testcase>
    <testcase name="angular-generation abstract-class" time="0.0100" classname="abstract-class">
    </testcase>
    <testcase name="angular-generation props" time="0.0590" classname="props">
    </testcase>
    <testcase name="angular-generation pick-props" time="0.0300" classname="pick-props">
    </testcase>
    <testcase name="angular-generation state" time="0.0520" classname="state">
    </testcase>
    <testcase name="angular-generation state-short-operator" time="0.0230" classname="state-short-operator">
    </testcase>
    <testcase name="angular-generation internal-state" time="0.0130" classname="internal-state">
    </testcase>
    <testcase name="angular-generation empty-component" time="0.0370" classname="empty-component">
    </testcase>
    <testcase name="angular-generation component-input" time="0.0260" classname="component-input">
    </testcase>
    <testcase name="angular-generation component-input-defaults" time="0.0630" classname="component-input-defaults">
    </testcase>
    <testcase name="angular-generation rest-styles" time="0.0250" classname="rest-styles">
    </testcase>
    <testcase name="angular-generation runtime-import" time="0.0030" classname="runtime-import">
    </testcase>
    <testcase name="angular-generation slots" time="0.0320" classname="slots">
    </testcase>
    <testcase name="angular-generation slot-pass-from-rest" time="0.0220" classname="slot-pass-from-rest">
    </testcase>
    <testcase name="angular-generation effect" time="0.0330" classname="effect">
    </testcase>
    <testcase name="angular-generation context" time="0.0270" classname="context">
    </testcase>
    <testcase name="angular-generation spread-attribute" time="0.0270" classname="spread-attribute">
    </testcase>
    <testcase name="angular-generation spread-attribute-without-ref" time="0.0130" classname="spread-attribute-without-ref">
    </testcase>
    <testcase name="angular-generation spread-attribute-with-custom-component" time="0.0200" classname="spread-attribute-with-custom-component">
    </testcase>
    <testcase name="angular-generation dx-inner-widget" time="0.0420" classname="dx-inner-widget">
    </testcase>
    <testcase name="angular-generation dx-widget-with-template" time="0.0250" classname="dx-widget-with-template">
    </testcase>
    <testcase name="angular-generation dx-widget-with-props" time="0.0170" classname="dx-widget-with-props">
    </testcase>
    <testcase name="angular-generation spread-props-attribute" time="0.0270" classname="spread-props-attribute">
    </testcase>
    <testcase name="angular-generation template" time="0.0570" classname="template">
    </testcase>
    <testcase name="angular-generation template-transit" time="0.0200" classname="template-transit">
    </testcase>
    <testcase name="angular-generation template-pass" time="0.0280" classname="template-pass">
    </testcase>
    <testcase name="angular-generation Throw error if ref is passed to template" time="0.0010" classname="Throw error if ref is passed to template">
    </testcase>
    <testcase name="angular-generation method" time="0.0160" classname="method">
    </testcase>
    <testcase name="angular-generation method-use-apiref" time="0.0210" classname="method-use-apiref">
    </testcase>
    <testcase name="angular-generation mutable-state" time="0.0220" classname="mutable-state">
    </testcase>
    <testcase name="angular-generation model-value-disabled" time="0.0200" classname="model-value-disabled">
    </testcase>
    <testcase name="angular-generation model" time="0.0170" classname="model">
    </testcase>
    <testcase name="angular-generation list" time="0.0360" classname="list">
    </testcase>
    <testcase name="angular-generation globals-in-template" time="0.0190" classname="globals-in-template">
    </testcase>
    <testcase name="angular-generation import-component" time="0.0160" classname="import-component">
    </testcase>
    <testcase name="angular-generation import-component-named" time="0.0140" classname="import-component-named">
    </testcase>
    <testcase name="angular-generation component-bindings-only" time="0.0050" classname="component-bindings-only">
    </testcase>
    <testcase name="angular-generation component-pass" time="0.0500" classname="component-pass">
    </testcase>
    <testcase name="angular-generation jsx-function-in-view" time="0.0190" classname="jsx-function-in-view">
    </testcase>
    <testcase name="angular-generation refs" time="0.0530" classname="refs">
    </testcase>
    <testcase name="angular-generation dx-widget-with-ref-prop" time="0.0100" classname="dx-widget-with-ref-prop">
    </testcase>
    <testcase name="angular-generation refs-as-props" time="0.0200" classname="refs-as-props">
    </testcase>
    <testcase name="angular-generation implements" time="0.0140" classname="implements">
    </testcase>
    <testcase name="angular-generation two-way-props" time="0.0130" classname="two-way-props">
    </testcase>
    <testcase name="angular-generation getter-with-complex-type" time="0.0210" classname="getter-with-complex-type">
    </testcase>
    <testcase name="angular-generation nested" time="0.0310" classname="nested">
    </testcase>
    <testcase name="angular-generation nested-props" time="0.0190" classname="nested-props">
    </testcase>
    <testcase name="angular-generation forward-ref-template" time="0.0270" classname="forward-ref-template">
    </testcase>
    <testcase name="angular-generation forward-ref-parent" time="0.0340" classname="forward-ref-parent">
    </testcase>
    <testcase name="angular-generation extra-elements" time="0.0160" classname="extra-elements">
    </testcase>
    <testcase name="angular-generation forward-ref-child" time="0.0190" classname="forward-ref-child">
    </testcase>
    <testcase name="angular-generation export-default" time="0.0120" classname="export-default">
    </testcase>
    <testcase name="angular-generation export-named" time="0.0090" classname="export-named">
    </testcase>
    <testcase name="angular-generation export-named-api-ref" time="0.0090" classname="export-named-api-ref">
    </testcase>
    <testcase name="angular-generation collision-tag-name-and-property" time="0.0120" classname="collision-tag-name-and-property">
    </testcase>
    <testcase name="angular-generation effects-with-iterable" time="0.0290" classname="effects-with-iterable">
    </testcase>
    <testcase name="angular-generation portal" time="0.0240" classname="portal">
    </testcase>
    <testcase name="angular-generation functions" time="0.0200" classname="functions">
    </testcase>
    <testcase name="angular-generation external-functions" time="0.0350" classname="external-functions">
    </testcase>
    <testcase name="angular-generation iterables-repeat" time="0.0200" classname="iterables-repeat">
    </testcase>
    <testcase name="angular-generation import-type" time="0.0140" classname="import-type">
    </testcase>
    <testcase name="angular-generation private" time="0.0110" classname="private">
    </testcase>
    <testcase name="angular-generation view-without-tag" time="0.0170" classname="view-without-tag">
    </testcase>
    <testcase name="angular-generation view-without-tag-arrow" time="0.0140" classname="view-without-tag-arrow">
    </testcase>
    <testcase name="angular-generation spread-in-view" time="0.0220" classname="spread-in-view">
    </testcase>
    <testcase name="angular-generation template-default-value" time="0.0300" classname="template-default-value">
    </testcase>
    <testcase name="angular-generation dynamic-component" time="0.0460" classname="dynamic-component">
    </testcase>
    <testcase name="angular-generation dynamic-components-array" time="0.0330" classname="dynamic-components-array">
    </testcase>
    <testcase name="angular-generation jsx-template-spread" time="0.0240" classname="jsx-template-spread">
    </testcase>
    <testcase name="angular-generation template-from-destructuring" time="0.0090" classname="template-from-destructuring">
    </testcase>
    <testcase name="angular-generation object-with-current" time="0.0130" classname="object-with-current">
    </testcase>
    <testcase name="angular-generation nested-default" time="0.0320" classname="nested-default">
    </testcase>
    <testcase name="angular-generation nested-default-props" time="0.0100" classname="nested-default-props">
    </testcase>
    <testcase name="angular-generation nested-pick" time="0.0100" classname="nested-pick">
    </testcase>
    <testcase name="angular-generation nested-props-and-component" time="0.0310" classname="nested-props-and-component">
    </testcase>
    <testcase name="angular-generation nested-inherited" time="0.0170" classname="nested-inherited">
    </testcase>
    <testcase name="angular-generation refs-as-attribute" time="0.0270" classname="refs-as-attribute">
    </testcase>
    <testcase name="angular-generation refs-as-attribute-helper" time="0.0130" classname="refs-as-attribute-helper">
    </testcase>
    <testcase name="angular-generation types" time="0.0140" classname="types">
    </testcase>
    <testcase name="angular-generation types-external" time="0.0140" classname="types-external">
    </testcase>
    <testcase name="angular-generation getters-is-memorized" time="0.0160" classname="getters-is-memorized">
    </testcase>
    <testcase name="angular-generation getters-ordering" time="0.0290" classname="getters-ordering">
    </testcase>
    <testcase name="angular-generation getters-destructuring" time="0.0220" classname="getters-destructuring">
    </testcase>
  </testsuite>
  <testsuite name="Default option rules" timestamp="2021-11-25T09:16:23" tests="3" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/angular-generation.test.ts" time="0.0310" failures="0">
    <testcase name="angular-generation Default option rules default-options-empty" time="0.0100" classname="default-options-empty">
    </testcase>
    <testcase name="angular-generation Default option rules required-props" time="0.0090" classname="required-props">
    </testcase>
    <testcase name="angular-generation Default option rules use-external-component-bindings" time="0.0120" classname="use-external-component-bindings">
    </testcase>
  </testsuite>
  <testsuite name="Angular generator" timestamp="2021-11-25T09:16:23" tests="0" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/angular-generator.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="JSX -&gt; AngularTemplate" timestamp="2021-11-25T09:16:23" tests="40" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/angular-generator.test.ts" time="0.0030" failures="0">
    <testcase name="Angular generator JSX -&gt; AngularTemplate Empty JsxOpeningElement" time="0.0000" classname="Empty JsxOpeningElement">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Empty JsxSelfClosingElement should have opening and closing tags" time="0.0000" classname="Empty JsxSelfClosingElement should have opening and closing tags">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate collision-tag-name-and-property" time="0.0000" classname="collision-tag-name-and-property">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Void elements should be self-closing" time="0.0000" classname="Void elements should be self-closing">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate JsxAttribute with expression - [attr]=&quot;value&quot;" time="0.0000" classname="JsxAttribute with expression - [attr]=&quot;value&quot;">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate process title attribute - use empty string if value is undefined&quot;" time="0.0000" classname="process title attribute - use empty string if value is undefined&quot;">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate do not process title attribute if it stringLiteral value&quot;" time="0.0000" classname="do not process title attribute if it stringLiteral value&quot;">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate JsxAttribute with template expression - [attr]=&quot;string concatenation&quot;" time="0.0000" classname="JsxAttribute with template expression - [attr]=&quot;string concatenation&quot;">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate JsxAttribute without initializer" time="0.0000" classname="JsxAttribute without initializer">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate JsxAttribute with string literal expression - attr=&quot;value&quot;" time="0.0000" classname="JsxAttribute with string literal expression - attr=&quot;value&quot;">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate JsxAttribute is JsxExpression with stringLiteral - attr=&quot;value&quot;" time="0.0000" classname="JsxAttribute is JsxExpression with stringLiteral - attr=&quot;value&quot;">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate aria-label attribute binding - [attr.aria-label]&quot;" time="0.0000" classname="aria-label attribute binding - [attr.aria-label]&quot;">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate aria-label attribute - aria-label&quot;" time="0.0000" classname="aria-label attribute - aria-label&quot;">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate JsxSelfClosingElement with attributes" time="0.0010" classname="JsxSelfClosingElement with attributes">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate JSX element with Opening and Close Elements" time="0.0000" classname="JSX element with Opening and Close Elements">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate JsxElement: trim spaces in string children" time="0.0000" classname="JsxElement: trim spaces in string children">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Fragment should be ignored" time="0.0000" classname="Fragment should be ignored">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate JSX element with with child element" time="0.0000" classname="JSX element with with child element">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Pass svg children into component" time="0.0000" classname="Pass svg children into component">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Pass not svg children into svg widget - throw exception" time="0.0010" classname="Pass not svg children into svg widget - throw exception">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate JSX element with with child element that transformed from expression - no wrap it {{}}" time="0.0000" classname="JSX element with with child element that transformed from expression - no wrap it {{}}">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate &lt;element&gt;{&quot;text&quot;}&lt;/element&gt; -&gt; &lt;element&gt;text&lt;/element&gt;" time="0.0000" classname="&lt;element&gt;{&quot;text&quot;}&lt;/element&gt; -&gt; &lt;element&gt;text&lt;/element&gt;">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Rename className attribute to class" time="0.0000" classname="Rename className attribute to class">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Rename style attribute to ngStyle" time="0.0000" classname="Rename style attribute to ngStyle">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate notJsxExpr &amp;&amp; &lt;element&gt;&lt;/element&gt; -&gt; &lt;element *ngIf=&apos;notJsxExpr&apos;&gt;&lt;/element&gt;" time="0.0000" classname="notJsxExpr &amp;&amp; &lt;element&gt;&lt;/element&gt; -&gt; &lt;element *ngIf=&apos;notJsxExpr&apos;&gt;&lt;/element&gt;">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Binary operator in attribute" time="0.0000" classname="Binary operator in attribute">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate not supported binary expression in JsxExpression - throw exception" time="0.0000" classname="not supported binary expression in JsxExpression - throw exception">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate non jsx binary in element" time="0.0000" classname="non jsx binary in element">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate notJsxExpr &amp;&amp; &lt;element/&gt; -&gt; &lt;element *ngIf=&apos;notJsxExpr&apos; /&gt;" time="0.0000" classname="notJsxExpr &amp;&amp; &lt;element/&gt; -&gt; &lt;element *ngIf=&apos;notJsxExpr&apos; /&gt;">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate ngIf directive with string - replace quotes with backslash quotes" time="0.0000" classname="ngIf directive with string - replace quotes with backslash quotes">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate condition?then:else - &lt;div ngIf=&apos;condition&apos;&gt; &lt;div ngIf=&apos;!(condition)&apos;" time="0.0000" classname="condition?then:else - &lt;div ngIf=&apos;condition&apos;&gt; &lt;div ngIf=&apos;!(condition)&apos;">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate non jsx conditional - condition?then:else - {{then}} {{else}}&apos;" time="0.0000" classname="non jsx conditional - condition?then:else - {{then}} {{else}}&apos;">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate conditional expression with paren" time="0.0000" classname="conditional expression with paren">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate &lt;element&gt;nonJsxExpr&lt;/element&gt; -&gt; &lt;element&gt;{{nonJsxExpr}}&lt;/element&gt;" time="0.0000" classname="&lt;element&gt;nonJsxExpr&lt;/element&gt; -&gt; &lt;element&gt;{{nonJsxExpr}}&lt;/element&gt;">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate render element from variable" time="0.0000" classname="render element from variable">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate render element from variable in condition expression in parens" time="0.0000" classname="render element from variable in condition expression in parens">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate render element from variable in condition" time="0.0010" classname="render element from variable in condition">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate ref" time="0.0000" classname="ref">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate ref with component context" time="0.0000" classname="ref with component context">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate ref with component context" time="0.0000" classname="ref with component context">
    </testcase>
  </testsuite>
  <testsuite name="JsxAttribute SVG with svg" timestamp="2021-11-25T09:16:23" tests="5" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/angular-generator.test.ts" time="0.0010" failures="0">
    <testcase name="Angular generator JSX -&gt; AngularTemplate JsxAttribute SVG with svg name -&gt; [attr.name]" time="0.0000" classname="name -&gt; [attr.name]">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate JsxAttribute SVG with svg className-&gt;attr.class" time="0.0000" classname="className-&gt;attr.class">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate JsxAttribute SVG with svg camelCase -&gt; camel-case" time="0.0000" classname="camelCase -&gt; camel-case">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate JsxAttribute SVG with svg Do not use attr.binding for string literal value" time="0.0000" classname="Do not use attr.binding for string literal value">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate JsxAttribute SVG with svg do not dasherize not-kebab-case attribute" time="0.0010" classname="do not dasherize not-kebab-case attribute">
    </testcase>
  </testsuite>
  <testsuite name="Dynamic components" timestamp="2021-11-25T09:16:23" tests="9" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/angular-generator.test.ts" time="0.0020" failures="0">
    <testcase name="Angular generator JSX -&gt; AngularTemplate Dynamic components &lt;DynamicComponent /&gt; -&gt; &lt;ng-template dynamicComponent&gt;" time="0.0000" classname="&lt;DynamicComponent /&gt; -&gt; &lt;ng-template dynamicComponent&gt;">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Dynamic components &lt;DynamicComponent [props]=&apos;value&apos;/&gt;" time="0.0000" classname="&lt;DynamicComponent [props]=&apos;value&apos;/&gt;">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Dynamic components &lt;DynamicComponent with spreadProps/&gt;" time="0.0000" classname="&lt;DynamicComponent with spreadProps/&gt;">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Dynamic components &lt;DynamicComponent&gt;&lt;/DynamicComponent&gt; -&gt; &lt;ng-template dynamicComponent&gt;" time="0.0000" classname="&lt;DynamicComponent&gt;&lt;/DynamicComponent&gt; -&gt; &lt;ng-template dynamicComponent&gt;">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Dynamic components &lt;DynamicComponent template={()=&gt;&lt;div/&gt;}/&gt; -&gt; &lt;component&gt;&lt;template&gt;&lt;/component&gt;" time="0.0000" classname="&lt;DynamicComponent template={()=&gt;&lt;div/&gt;}/&gt; -&gt; &lt;component&gt;&lt;template&gt;&lt;/component&gt;">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Dynamic components can&apos;t parse template" time="0.0010" classname="can&apos;t parse template">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Dynamic components &lt;DynamicComponent template={()=&gt;&lt;div/&gt;}&gt;&lt;/DynamicComponent&gt; -&gt; &lt;component&gt;&lt;template&gt;&lt;/component&gt;" time="0.0000" classname="&lt;DynamicComponent template={()=&gt;&lt;div/&gt;}&gt;&lt;/DynamicComponent&gt; -&gt; &lt;component&gt;&lt;template&gt;&lt;/component&gt;">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Dynamic components condition &amp;&amp; &lt;DynamicComponent /&gt; -&gt; &lt;ng-template *ngIf dynamicComponent&gt;" time="0.0000" classname="condition &amp;&amp; &lt;DynamicComponent /&gt; -&gt; &lt;ng-template *ngIf dynamicComponent&gt;">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Dynamic components map &lt;DynamicComponent /&gt;" time="0.0010" classname="map &lt;DynamicComponent /&gt;">
    </testcase>
  </testsuite>
  <testsuite name="Component" timestamp="2021-11-25T09:16:23" tests="4" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/angular-generator.test.ts" time="0.0010" failures="0">
    <testcase name="Angular generator JSX -&gt; AngularTemplate Component Render himself" time="0.0000" classname="Render himself">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Component &lt;SVGComponent/&gt;" time="0.0010" classname="&lt;SVGComponent/&gt;">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Component render svg component with children inside html component" time="0.0000" classname="render svg component with children inside html component">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Component &lt;SVG Component&gt;&lt;/SVGComponent&gt;" time="0.0000" classname="&lt;SVG Component&gt;&lt;/SVGComponent&gt;">
    </testcase>
  </testsuite>
  <testsuite name="Slots with conditional rendering" timestamp="2021-11-25T09:16:23" tests="1" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/angular-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Angular generator JSX -&gt; AngularTemplate Slots with conditional rendering slot? slot: alternative content" time="0.0000" classname="slot? slot: alternative content">
    </testcase>
  </testsuite>
  <testsuite name="Spread Attributes on html element" timestamp="2021-11-25T09:16:23" tests="4" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/angular-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Angular generator JSX -&gt; AngularTemplate Spread Attributes on html element should not be in element" time="0.0000" classname="should not be in element">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Spread Attributes on html element element with spread attribute should not generate ref attribute if it have one" time="0.0000" classname="element with spread attribute should not generate ref attribute if it have one">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Spread Attributes on html element element with spread attribute should generate unique ref attribute if it have no one" time="0.0000" classname="element with spread attribute should generate unique ref attribute if it have no one">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Spread Attributes on html element getJsxAttributes should collect attributes from all tree" time="0.0000" classname="getJsxAttributes should collect attributes from all tree">
    </testcase>
  </testsuite>
  <testsuite name="Spread attribute on component" timestamp="2021-11-25T09:16:23" tests="7" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/angular-generator.test.ts" time="0.0020" failures="0">
    <testcase name="Angular generator JSX -&gt; AngularTemplate Spread attribute on component ...props - pick only props those exist in widget" time="0.0000" classname="...props - pick only props those exist in widget">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Spread attribute on component ...props, method - pick method" time="0.0010" classname="...props, method - pick method">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Spread attribute on component method, ...props - pick method if props is not exist" time="0.0000" classname="method, ...props - pick method if props is not exist">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Spread attribute on component getter, ...props - pick getter, prop" time="0.0010" classname="getter, ...props - pick getter, prop">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Spread attribute on component ...props, getter - pick props,getter" time="0.0000" classname="...props, getter - pick props,getter">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Spread attribute on component ...{...props, ...restAttributes} - pick props" time="0.0000" classname="...{...props, ...restAttributes} - pick props">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Spread attribute on component ...{x: x, y}" time="0.0000" classname="...{x: x, y}">
    </testcase>
  </testsuite>
  <testsuite name="hasStyle" timestamp="2021-11-25T09:16:23" tests="4" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/angular-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Angular generator JSX -&gt; AngularTemplate hasStyle false if there is not any style attribute" time="0.0000" classname="false if there is not any style attribute">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate hasStyle true if there is a style attribute" time="0.0000" classname="true if there is a style attribute">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate hasStyle true if there is a style attribute in the child element" time="0.0000" classname="true if there is a style attribute in the child element">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate hasStyle true if there is a style attribute in the child self-closing element" time="0.0000" classname="true if there is a style attribute in the child self-closing element">
    </testcase>
  </testsuite>
  <testsuite name="slots" timestamp="2021-11-25T09:16:23" tests="4" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/angular-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Angular generator JSX -&gt; AngularTemplate slots named slot" time="0.0000" classname="named slot">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate slots named slot with empty context" time="0.0000" classname="named slot with empty context">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate slots children slot" time="0.0000" classname="children slot">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate slots slot in svg component" time="0.0000" classname="slot in svg component">
    </testcase>
  </testsuite>
  <testsuite name="Import widget." timestamp="2021-11-25T09:16:23" tests="7" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/angular-generator.test.ts" time="0.0030" failures="0">
    <testcase name="Angular generator JSX -&gt; AngularTemplate slots Import widget. &lt;Widget&gt;&lt;/Widget&gt; -&gt; &lt;dx-widget&gt;&lt;/dx-widget&gt;" time="0.0000" classname="&lt;Widget&gt;&lt;/Widget&gt; -&gt; &lt;dx-widget&gt;&lt;/dx-widget&gt;">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate slots Import widget. &lt;Widget/&gt; -&gt; &lt;dx-widget&gt;&lt;/dx-widget&gt;" time="0.0000" classname="&lt;Widget/&gt; -&gt; &lt;dx-widget&gt;&lt;/dx-widget&gt;">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate slots Import widget. import component statement should have import module" time="0.0010" classname="import component statement should have import module">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate slots Import widget. import named exported component statement should have import module" time="0.0010" classname="import named exported component statement should have import module">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate slots Import widget. Event attribute should be wrapped in paren" time="0.0000" classname="Event attribute should be wrapped in paren">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate slots Import widget. className should not be renamed to class" time="0.0010" classname="className should not be renamed to class">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate slots Import widget. className should be renamed to class in children" time="0.0000" classname="className should be renamed to class in children">
    </testcase>
  </testsuite>
  <testsuite name="Pass slots via attribute" timestamp="2021-11-25T09:16:23" tests="4" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/angular-generator.test.ts" time="0.0020" failures="0">
    <testcase name="Angular generator JSX -&gt; AngularTemplate slots Import widget. Pass slots via attribute Self-closing element" time="0.0010" classname="Self-closing element">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate slots Import widget. Pass slots via attribute Self-closing element with two slots" time="0.0000" classname="Self-closing element with two slots">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate slots Import widget. Pass slots via attribute spread props with slot" time="0.0010" classname="spread props with slot">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate slots Import widget. Pass slots via attribute element with closing tag" time="0.0000" classname="element with closing tag">
    </testcase>
  </testsuite>
  <testsuite name="template" timestamp="2021-11-25T09:16:23" tests="7" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/angular-generator.test.ts" time="0.0030" failures="0">
    <testcase name="Angular generator JSX -&gt; AngularTemplate template &lt;template/&gt; -&gt; &lt;ng-container&gt;" time="0.0000" classname="&lt;template/&gt; -&gt; &lt;ng-container&gt;">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate template &lt;template&gt;&lt;template -&gt; &lt;ng-container&gt;&lt;/ng-container&gt;" time="0.0000" classname="&lt;template&gt;&lt;template -&gt; &lt;ng-container&gt;&lt;/ng-container&gt;">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate template template attributes -&gt; template context" time="0.0010" classname="template attributes -&gt; template context">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate template template attributes -&gt; template context. bind method to this" time="0.0000" classname="template attributes -&gt; template context. bind method to this">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate template template attributes -&gt; template context. Do not bind GetAccessor to this" time="0.0010" classname="template attributes -&gt; template context. Do not bind GetAccessor to this">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate template render template with condition *ngIf" time="0.0000" classname="render template with condition *ngIf">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate template render slot if template is not exist" time="0.0010" classname="render slot if template is not exist">
    </testcase>
  </testsuite>
  <testsuite name="Template with spread attribute -&gt; template context" timestamp="2021-11-25T09:16:23" tests="6" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/angular-generator.test.ts" time="0.0020" failures="0">
    <testcase name="Angular generator JSX -&gt; AngularTemplate template Template with spread attribute -&gt; template context template jsx spread attributes" time="0.0000" classname="template jsx spread attributes">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate template Template with spread attribute -&gt; template context ...getter" time="0.0010" classname="...getter">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate template Template with spread attribute -&gt; template context ...getter as type" time="0.0000" classname="...getter as type">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate template Template with spread attribute -&gt; template context ...{x, y}" time="0.0010" classname="...{x, y}">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate template Template with spread attribute -&gt; template context ...{x, y, ...getter}" time="0.0000" classname="...{x, y, ...getter}">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate template Template with spread attribute -&gt; template context ...{x, y, ...restAttributes}" time="0.0000" classname="...{x, y, ...restAttributes}">
    </testcase>
  </testsuite>
  <testsuite name="function-&gt;ng-template" timestamp="2021-11-25T09:16:23" tests="4" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/angular-generator.test.ts" time="0.0010" failures="0">
    <testcase name="Angular generator JSX -&gt; AngularTemplate template function-&gt;ng-template w/o parameter" time="0.0000" classname="w/o parameter">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate template function-&gt;ng-template binding pattern parameter" time="0.0000" classname="binding pattern parameter">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate template function-&gt;ng-template parameter with literal type node" time="0.0010" classname="parameter with literal type node">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate template function-&gt;ng-template can&apos;t parse parameter without type" time="0.0000" classname="can&apos;t parse parameter without type">
    </testcase>
  </testsuite>
  <testsuite name="Parse Map function" timestamp="2021-11-25T09:16:23" tests="12" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/angular-generator.test.ts" time="0.0040" failures="0">
    <testcase name="Angular generator JSX -&gt; AngularTemplate Parse Map function .map((item)=&gt;&lt;div&gt;) -&gt; *ngFor" time="0.0000" classname=".map((item)=&gt;&lt;div&gt;) -&gt; *ngFor">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Parse Map function .map((item)=&gt;item) -&gt; *ngFor" time="0.0000" classname=".map((item)=&gt;item) -&gt; *ngFor">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Parse Map function .map((item, index)=&gt;&lt;div&gt;) -&gt; *ngFor" time="0.0000" classname=".map((item, index)=&gt;&lt;div&gt;) -&gt; *ngFor">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Parse Map function key attribute should be ignored" time="0.0000" classname="key attribute should be ignored">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Parse Map function map with key attribute should generate trackBy function" time="0.0010" classname="map with key attribute should generate trackBy function">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Parse Map function generate trackByName from complex expression" time="0.0010" classname="generate trackByName from complex expression">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Parse Map function map - can use prop in key" time="0.0000" classname="map - can use prop in key">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Parse Map function map inside an other map" time="0.0010" classname="map inside an other map">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Parse Map function m.map(a=&gt;a.map()=&gt;&lt;div&gt;)" time="0.0010" classname="m.map(a=&gt;a.map()=&gt;&lt;div&gt;)">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Parse Map function map with conditional rendering" time="0.0000" classname="map with conditional rendering">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Parse Map function Not function in the map" time="0.0000" classname="Not function in the map">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate Parse Map function Parse map with destruction" time="0.0000" classname="Parse map with destruction">
    </testcase>
  </testsuite>
  <testsuite name="View Function" timestamp="2021-11-25T09:16:23" tests="18" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/angular-generator.test.ts" time="0.0010" failures="0">
    <testcase name="Angular generator JSX -&gt; AngularTemplate View Function Function that returns JSX can be converted to template" time="0.0000" classname="Function that returns JSX can be converted to template">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate View Function Function without return statement" time="0.0000" classname="Function without return statement">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate View Function Rename viewModel identifier" time="0.0010" classname="Rename viewModel identifier">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate View Function Function without JSX is generated" time="0.0000" classname="Function without JSX is generated">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate View Function Arrow function JSX can be converted to template" time="0.0000" classname="Arrow function JSX can be converted to template">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate View Function template generation if jsx is wrapped into paren" time="0.0000" classname="template generation if jsx is wrapped into paren">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate View Function Arrow function without JSX behaves as usual function" time="0.0000" classname="Arrow function without JSX behaves as usual function">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate View Function Add arrow function in context" time="0.0000" classname="Add arrow function in context">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate View Function Declaration list with jsx and noJsx - skip only jsx variables" time="0.0000" classname="Declaration list with jsx and noJsx - skip only jsx variables">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate View Function Can use variables in view function" time="0.0000" classname="Can use variables in view function">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate View Function Skip type casting in view" time="0.0000" classname="Skip type casting in view">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate View Function Can decomposite component" time="0.0000" classname="Can decomposite component">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate View Function Can decomposite component - props" time="0.0000" classname="Can decomposite component - props">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate View Function Can use jsx variables in view function" time="0.0000" classname="Can use jsx variables in view function">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate View Function Can use jsx variable twice" time="0.0000" classname="Can use jsx variable twice">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate View Function Can use jsx variable with condition" time="0.0000" classname="Can use jsx variable with condition">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate View Function Can store map in variable" time="0.0000" classname="Can store map in variable">
    </testcase>
    <testcase name="Angular generator JSX -&gt; AngularTemplate View Function Convert to template function with ternary operator" time="0.0000" classname="Convert to template function with ternary operator">
    </testcase>
  </testsuite>
  <testsuite name="Decorators" timestamp="2021-11-25T09:16:23" tests="7" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/angular-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Angular generator Decorators OneWay -&gt; Input" time="0.0000" classname="OneWay -&gt; Input">
    </testcase>
    <testcase name="Angular generator Decorators TwoWay -&gt; Output" time="0.0000" classname="TwoWay -&gt; Output">
    </testcase>
    <testcase name="Angular generator Decorators Event -&gt; Output" time="0.0000" classname="Event -&gt; Output">
    </testcase>
    <testcase name="Angular generator Decorators Template -&gt; Input" time="0.0000" classname="Template -&gt; Input">
    </testcase>
    <testcase name="Angular generator Decorators Effect -&gt; &apos;&apos;" time="0.0000" classname="Effect -&gt; &apos;&apos;">
    </testcase>
    <testcase name="Angular generator Decorators Ref -&gt; &apos;&apos;" time="0.0000" classname="Ref -&gt; &apos;&apos;">
    </testcase>
    <testcase name="Angular generator Decorators InternalState -&gt; &apos;&apos;" time="0.0000" classname="InternalState -&gt; &apos;&apos;">
    </testcase>
  </testsuite>
  <testsuite name="Component" timestamp="2021-11-25T09:16:23" tests="4" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/angular-generator.test.ts" time="0.0010" failures="0">
    <testcase name="Angular generator Decorators Component Replace viewFunction with template" time="0.0000" classname="Replace viewFunction with template">
    </testcase>
    <testcase name="Angular generator Decorators Component Add templates for variable with element" time="0.0000" classname="Add templates for variable with element">
    </testcase>
    <testcase name="Angular generator Decorators Component Add templates for variable with element in paren" time="0.0000" classname="Add templates for variable with element in paren">
    </testcase>
    <testcase name="Angular generator Decorators Component should remove all declaration parameters" time="0.0010" classname="should remove all declaration parameters">
    </testcase>
  </testsuite>
  <testsuite name="CompileSpreadAttributes" timestamp="2021-11-25T09:16:23" tests="4" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/angular-generator.test.ts" time="0.0020" failures="0">
    <testcase name="Angular generator Decorators Component CompileSpreadAttributes ...prop" time="0.0010" classname="...prop">
    </testcase>
    <testcase name="Angular generator Decorators Component CompileSpreadAttributes ...getter" time="0.0000" classname="...getter">
    </testcase>
    <testcase name="Angular generator Decorators Component CompileSpreadAttributes ...method" time="0.0000" classname="...method">
    </testcase>
    <testcase name="Angular generator Decorators Component CompileSpreadAttributes ...internalState" time="0.0010" classname="...internalState">
    </testcase>
  </testsuite>
  <testsuite name="ComponentBindings" timestamp="2021-11-25T09:16:23" tests="14" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/angular-generator.test.ts" time="0.0050" failures="0">
    <testcase name="Angular generator ComponentBindings Generate componentBindings as a class" time="0.0010" classname="Generate componentBindings as a class">
    </testcase>
    <testcase name="Angular generator ComponentBindings Do not include inherited props" time="0.0000" classname="Do not include inherited props">
    </testcase>
    <testcase name="Angular generator ComponentBindings Ref Prop generates ViewChild" time="0.0000" classname="Ref Prop generates ViewChild">
    </testcase>
    <testcase name="Angular generator ComponentBindings Ref Prop getter type is not element" time="0.0000" classname="Ref Prop getter type is not element">
    </testcase>
    <testcase name="Angular generator ComponentBindings Template property with exclamation token should ignore token" time="0.0000" classname="Template property with exclamation token should ignore token">
    </testcase>
    <testcase name="Angular generator ComponentBindings Event Prop generates Event EventEmitter" time="0.0010" classname="Event Prop generates Event EventEmitter">
    </testcase>
    <testcase name="Angular generator ComponentBindings Event Prop with type FunctionNodeType" time="0.0010" classname="Event Prop with type FunctionNodeType">
    </testcase>
    <testcase name="Angular generator ComponentBindings Event Prop with type FunctionNodeType without parameters" time="0.0000" classname="Event Prop with type FunctionNodeType without parameters">
    </testcase>
    <testcase name="Angular generator ComponentBindings Generate change for TwoWay prop with type" time="0.0010" classname="Generate change for TwoWay prop with type">
    </testcase>
    <testcase name="Angular generator ComponentBindings TwoWay without type" time="0.0000" classname="TwoWay without type">
    </testcase>
    <testcase name="Angular generator ComponentBindings TwoWay without type and initializer" time="0.0000" classname="TwoWay without type and initializer">
    </testcase>
    <testcase name="Angular generator ComponentBindings @Slot prop should generate getter" time="0.0000" classname="@Slot prop should generate getter">
    </testcase>
    <testcase name="Angular generator ComponentBindings @Template prop without type" time="0.0010" classname="@Template prop without type">
    </testcase>
    <testcase name="Angular generator ComponentBindings get prop with same name in get accessor" time="0.0000" classname="get prop with same name in get accessor">
    </testcase>
  </testsuite>
  <testsuite name="Angular Component" timestamp="2021-11-25T09:16:23" tests="3" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/angular-generator.test.ts" time="0.0030" failures="0">
    <testcase name="Angular generator Angular Component Calculate Selector" time="0.0010" classname="Calculate Selector">
    </testcase>
    <testcase name="Angular generator Angular Component generate component skeleton" time="0.0010" classname="generate component skeleton">
    </testcase>
    <testcase name="Angular generator Angular Component generate component skeleton with extends of Component Bindings" time="0.0010" classname="generate component skeleton with extends of Component Bindings">
    </testcase>
  </testsuite>
  <testsuite name="Imports" timestamp="2021-11-25T09:16:23" tests="7" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/angular-generator.test.ts" time="0.0030" failures="0">
    <testcase name="Angular generator Angular Component Imports Empty component" time="0.0010" classname="Empty component">
    </testcase>
    <testcase name="Angular generator Angular Component Imports Has OneWay property - Input" time="0.0000" classname="Has OneWay property - Input">
    </testcase>
    <testcase name="Angular generator Angular Component Imports Has Template property - Input, TemplateRef" time="0.0010" classname="Has Template property - Input, TemplateRef">
    </testcase>
    <testcase name="Angular generator Angular Component Imports Has TwoWay property - Input, Output, EventEmitter" time="0.0000" classname="Has TwoWay property - Input, Output, EventEmitter">
    </testcase>
    <testcase name="Angular generator Angular Component Imports Import should not have duplicates" time="0.0010" classname="Import should not have duplicates">
    </testcase>
    <testcase name="Angular generator Angular Component Imports Has Event property - Output, EventEmitter" time="0.0000" classname="Has Event property - Output, EventEmitter">
    </testcase>
    <testcase name="Angular generator Angular Component Imports Has Ref property - ViewChild, ElementRef" time="0.0000" classname="Has Ref property - ViewChild, ElementRef">
    </testcase>
  </testsuite>
  <testsuite name="Add setAccessor for InternalState" timestamp="2021-11-25T09:16:23" tests="5" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/angular-generator.test.ts" time="0.0030" failures="0">
    <testcase name="Angular generator Angular Component Add setAccessor for InternalState InternalState without token and type" time="0.0010" classname="InternalState without token and type">
    </testcase>
    <testcase name="Angular generator Angular Component Add setAccessor for InternalState InternalState with question token and type" time="0.0000" classname="InternalState with question token and type">
    </testcase>
    <testcase name="Angular generator Angular Component Add setAccessor for InternalState InternalState without question token and type" time="0.0010" classname="InternalState without question token and type">
    </testcase>
    <testcase name="Angular generator Angular Component Add setAccessor for InternalState InternalState with question token and any type" time="0.0000" classname="InternalState with question token and any type">
    </testcase>
    <testcase name="Angular generator Angular Component Add setAccessor for InternalState InternalState with exclamation token" time="0.0010" classname="InternalState with exclamation token">
    </testcase>
  </testsuite>
  <testsuite name="Default options" timestamp="2021-11-25T09:16:23" tests="3" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/angular-generator.test.ts" time="0.0010" failures="0">
    <testcase name="Angular generator Angular Component Default options Add import convertRulesToOptions, DefaultOptionsRule" time="0.0000" classname="Add import convertRulesToOptions, DefaultOptionsRule">
    </testcase>
    <testcase name="Angular generator Angular Component Default options Compile defaultOptions expression if defaultOptionRules expression is set" time="0.0000" classname="Compile defaultOptions expression if defaultOptionRules expression is set">
    </testcase>
    <testcase name="Angular generator Angular Component Default options Compile defaultOptions expression if defaultOptionRules expression is not set" time="0.0010" classname="Compile defaultOptions expression if defaultOptionRules expression is not set">
    </testcase>
  </testsuite>
  <testsuite name="Members generation" timestamp="2021-11-25T09:16:23" tests="18" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/angular-generator.test.ts" time="0.0040" failures="0">
    <testcase name="Angular generator Angular Component Members generation Access props - this.prop" time="0.0000" classname="Access props - this.prop">
    </testcase>
    <testcase name="Angular generator Angular Component Members generation Access TwoWay prop - this.prop" time="0.0000" classname="Access TwoWay prop - this.prop">
    </testcase>
    <testcase name="Angular generator Angular Component Members generation Access props - this.props.prop" time="0.0000" classname="Access props - this.props.prop">
    </testcase>
    <testcase name="Angular generator Angular Component Members generation Access props - viewModel.props.prop -&gt; newViewModel.prop" time="0.0000" classname="Access props - viewModel.props.prop -&gt; newViewModel.prop">
    </testcase>
    <testcase name="Angular generator Angular Component Members generation Access props - viewModel.props.prop" time="0.0000" classname="Access props - viewModel.props.prop">
    </testcase>
    <testcase name="Angular generator Angular Component Members generation Access props - viewModel.props.prop - prop" time="0.0000" classname="Access props - viewModel.props.prop - prop">
    </testcase>
    <testcase name="Angular generator Angular Component Members generation Access props - this.props without members" time="0.0010" classname="Access props - this.props without members">
    </testcase>
    <testcase name="Angular generator Angular Component Members generation Access props - this.props in bindingPattern statement" time="0.0000" classname="Access props - this.props in bindingPattern statement">
    </testcase>
    <testcase name="Angular generator Angular Component Members generation Access props - this.props with members" time="0.0010" classname="Access props - this.props with members">
    </testcase>
    <testcase name="Angular generator Angular Component Members generation Access props - const {p} = this.props" time="0.0000" classname="Access props - const {p} = this.props">
    </testcase>
    <testcase name="Angular generator Angular Component Members generation Access props - const {p} = (this.props as any)" time="0.0000" classname="Access props - const {p} = (this.props as any)">
    </testcase>
    <testcase name="Angular generator Angular Component Members generation Access TwoWay props - this.props.prop" time="0.0010" classname="Access TwoWay props - this.props.prop">
    </testcase>
    <testcase name="Angular generator Angular Component Members generation Call Event" time="0.0000" classname="Call Event">
    </testcase>
    <testcase name="Angular generator Angular Component Members generation Set TwoWay Prop" time="0.0000" classname="Set TwoWay Prop">
    </testcase>
    <testcase name="Angular generator Angular Component Members generation Can&apos;t set OneWay Prop" time="0.0010" classname="Can&apos;t set OneWay Prop">
    </testcase>
    <testcase name="Angular generator Angular Component Members generation Can&apos;t set OneWay Prop (using unary)" time="0.0000" classname="Can&apos;t set OneWay Prop (using unary)">
    </testcase>
    <testcase name="Angular generator Angular Component Members generation Access elementRef" time="0.0000" classname="Access elementRef">
    </testcase>
    <testcase name="Angular generator Angular Component Members generation Access ref object" time="0.0000" classname="Access ref object">
    </testcase>
  </testsuite>
  <testsuite name="Compile useEffect" timestamp="2021-11-25T09:16:23" tests="4" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/angular-generator.test.ts" time="0.0080" failures="0">
    <testcase name="Angular generator Angular Component Compile useEffect should generate schedule effect method and fill ngOnChanges if there is prop in dependency" time="0.0040" classname="should generate schedule effect method and fill ngOnChanges if there is prop in dependency">
    </testcase>
    <testcase name="Angular generator Angular Component Compile useEffect should generate schedule effect method and fill ngOnChanges all props in dependency" time="0.0010" classname="should generate schedule effect method and fill ngOnChanges all props in dependency">
    </testcase>
    <testcase name="Angular generator Angular Component Compile useEffect should generate schedule effect method if there is internal state in dependency" time="0.0020" classname="should generate schedule effect method if there is internal state in dependency">
    </testcase>
    <testcase name="Angular generator Angular Component Compile useEffect should not generate schedule effect method if there is not props in dependency" time="0.0010" classname="should not generate schedule effect method if there is not props in dependency">
    </testcase>
  </testsuite>
  <testsuite name="GetAccessor" timestamp="2021-11-25T09:16:23" tests="1" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/angular-generator.test.ts" time="0.0010" failures="0">
    <testcase name="Angular generator Angular Component GetAccessor add modifiers" time="0.0010" classname="add modifiers">
    </testcase>
  </testsuite>
  <testsuite name="Memorize GetAccessor with complexType" timestamp="2021-11-25T09:16:23" tests="8" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/angular-generator.test.ts" time="0.0020" failures="0">
    <testcase name="Angular generator Angular Component GetAccessor Memorize GetAccessor with complexType Memorize Array type" time="0.0010" classname="Memorize Array type">
    </testcase>
    <testcase name="Angular generator Angular Component GetAccessor Memorize GetAccessor with complexType Memorize createTypeLiteralNode with simple type" time="0.0000" classname="Memorize createTypeLiteralNode with simple type">
    </testcase>
    <testcase name="Angular generator Angular Component GetAccessor Memorize GetAccessor with complexType Memorize createTypeLiteralNode with complex type" time="0.0000" classname="Memorize createTypeLiteralNode with complex type">
    </testcase>
    <testcase name="Angular generator Angular Component GetAccessor Memorize GetAccessor with complexType Memorize object" time="0.0000" classname="Memorize object">
    </testcase>
    <testcase name="Angular generator Angular Component GetAccessor Memorize GetAccessor with complexType Do not memorize primitive type" time="0.0000" classname="Do not memorize primitive type">
    </testcase>
    <testcase name="Angular generator Angular Component GetAccessor Memorize GetAccessor with complexType Do not memorize union with primitive type" time="0.0000" classname="Do not memorize union with primitive type">
    </testcase>
    <testcase name="Angular generator Angular Component GetAccessor Memorize GetAccessor with complexType Memorize union with complex type" time="0.0000" classname="Memorize union with complex type">
    </testcase>
    <testcase name="Angular generator Angular Component GetAccessor Memorize GetAccessor with complexType Memorize object literal type" time="0.0010" classname="Memorize object literal type">
    </testcase>
  </testsuite>
  <testsuite name="GetAccessor cache" timestamp="2021-11-25T09:16:23" tests="6" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/angular-generator.test.ts" time="0.0020" failures="0">
    <testcase name="Angular generator Angular Component GetAccessor Memorize GetAccessor with complexType GetAccessor cache Do not generate if simple type" time="0.0000" classname="Do not generate if simple type">
    </testcase>
    <testcase name="Angular generator Angular Component GetAccessor Memorize GetAccessor with complexType GetAccessor cache Do not generate if has mutable dependency" time="0.0000" classname="Do not generate if has mutable dependency">
    </testcase>
    <testcase name="Angular generator Angular Component GetAccessor Memorize GetAccessor with complexType GetAccessor cache Create cache if component has getter with complex type" time="0.0000" classname="Create cache if component has getter with complex type">
    </testcase>
    <testcase name="Angular generator Angular Component GetAccessor Memorize GetAccessor with complexType GetAccessor cache Fill ngOnChanges if getter has prop dependency" time="0.0010" classname="Fill ngOnChanges if getter has prop dependency">
    </testcase>
    <testcase name="Angular generator Angular Component GetAccessor Memorize GetAccessor with complexType GetAccessor cache Reset cache on internal state setting" time="0.0010" classname="Reset cache on internal state setting">
    </testcase>
    <testcase name="Angular generator Angular Component GetAccessor Memorize GetAccessor with complexType GetAccessor cache Reset cache on ngChange if props in dependency" time="0.0000" classname="Reset cache on ngChange if props in dependency">
    </testcase>
  </testsuite>
  <testsuite name="Expressions" timestamp="2021-11-25T09:16:23" tests="5" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/angular-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Angular generator Expressions Variable declaration" time="0.0000" classname="Variable declaration">
    </testcase>
    <testcase name="Angular generator Expressions createVariableStatement without initializer" time="0.0000" classname="createVariableStatement without initializer">
    </testcase>
    <testcase name="Angular generator Expressions AsExpression" time="0.0000" classname="AsExpression">
    </testcase>
    <testcase name="Angular generator Expressions createPropertyAccessChain" time="0.0000" classname="createPropertyAccessChain">
    </testcase>
    <testcase name="Angular generator Expressions empty jsx expression" time="0.0000" classname="empty jsx expression">
    </testcase>
  </testsuite>
  <testsuite name="NonNullExpression" timestamp="2021-11-25T09:16:23" tests="3" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/angular-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Angular generator Expressions NonNullExpression NonNullExpression with this context - expression!" time="0.0000" classname="NonNullExpression with this context - expression!">
    </testcase>
    <testcase name="Angular generator Expressions NonNullExpression without options - expression!" time="0.0000" classname="without options - expression!">
    </testcase>
    <testcase name="Angular generator Expressions NonNullExpression with non-this context - expression" time="0.0000" classname="with non-this context - expression">
    </testcase>
  </testsuite>
  <testsuite name="Abstract method" timestamp="2021-11-25T09:16:23" tests="3" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/angular-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Angular generator Expressions Abstract method abstract method with modifier and without body" time="0.0000" classname="abstract method with modifier and without body">
    </testcase>
    <testcase name="Angular generator Expressions Abstract method abstract method without modifier and without body" time="0.0000" classname="abstract method without modifier and without body">
    </testcase>
    <testcase name="Angular generator Expressions Abstract method abstract method with modifier and body" time="0.0000" classname="abstract method with modifier and body">
    </testcase>
  </testsuite>
  <testsuite name="base-generator: expressions" timestamp="2021-11-25T09:16:23" tests="0" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Base Expressions" timestamp="2021-11-25T09:16:23" tests="1" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0000" failures="0">
    <testcase name="base-generator: expressions Base Expressions Expression" time="0.0000" classname="Expression">
    </testcase>
  </testsuite>
  <testsuite name="common expressions" timestamp="2021-11-25T09:16:23" tests="14" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0020" failures="0">
    <testcase name="base-generator: expressions common expressions Identifier" time="0.0000" classname="Identifier">
    </testcase>
    <testcase name="base-generator: expressions common expressions Identifier. Get dependency from variable" time="0.0000" classname="Identifier. Get dependency from variable">
    </testcase>
    <testcase name="base-generator: expressions common expressions createVoid" time="0.0000" classname="createVoid">
    </testcase>
    <testcase name="base-generator: expressions common expressions createTypeOf" time="0.0000" classname="createTypeOf">
    </testcase>
    <testcase name="base-generator: expressions common expressions NonNullExpression" time="0.0000" classname="NonNullExpression">
    </testcase>
    <testcase name="base-generator: expressions common expressions createNew" time="0.0000" classname="createNew">
    </testcase>
    <testcase name="base-generator: expressions common expressions Call" time="0.0000" classname="Call">
    </testcase>
    <testcase name="base-generator: expressions common expressions Call with typeArguments" time="0.0000" classname="Call with typeArguments">
    </testcase>
    <testcase name="base-generator: expressions common expressions createCallChain" time="0.0000" classname="createCallChain">
    </testcase>
    <testcase name="base-generator: expressions common expressions createCallChain without question mark and parameters" time="0.0010" classname="createCallChain without question mark and parameters">
    </testcase>
    <testcase name="base-generator: expressions common expressions Paren" time="0.0000" classname="Paren">
    </testcase>
    <testcase name="base-generator: expressions common expressions createDelete" time="0.0000" classname="createDelete">
    </testcase>
    <testcase name="base-generator: expressions common expressions createAsExpression" time="0.0000" classname="createAsExpression">
    </testcase>
    <testcase name="base-generator: expressions common expressions Throw" time="0.0010" classname="Throw">
    </testcase>
  </testsuite>
  <testsuite name="TryCatch" timestamp="2021-11-25T09:16:23" tests="4" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0010" failures="0">
    <testcase name="base-generator: expressions common expressions TryCatch createTry" time="0.0000" classname="createTry">
    </testcase>
    <testcase name="base-generator: expressions common expressions TryCatch createTry with catch" time="0.0010" classname="createTry with catch">
    </testcase>
    <testcase name="base-generator: expressions common expressions TryCatch createTry with catch without variable" time="0.0000" classname="createTry with catch without variable">
    </testcase>
    <testcase name="base-generator: expressions common expressions TryCatch createTry with finally" time="0.0000" classname="createTry with finally">
    </testcase>
  </testsuite>
  <testsuite name="literal expressions" timestamp="2021-11-25T09:16:23" tests="6" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0000" failures="0">
    <testcase name="base-generator: expressions literal expressions createStringLiteral" time="0.0000" classname="createStringLiteral">
    </testcase>
    <testcase name="base-generator: expressions literal expressions createNumericLiteral" time="0.0000" classname="createNumericLiteral">
    </testcase>
    <testcase name="base-generator: expressions literal expressions ArrayLiteral" time="0.0000" classname="ArrayLiteral">
    </testcase>
    <testcase name="base-generator: expressions literal expressions createArrayTypeNode" time="0.0000" classname="createArrayTypeNode">
    </testcase>
    <testcase name="base-generator: expressions literal expressions createLiteralTypeNode" time="0.0000" classname="createLiteralTypeNode">
    </testcase>
    <testcase name="base-generator: expressions literal expressions createRegularExpressionLiteral" time="0.0000" classname="createRegularExpressionLiteral">
    </testcase>
  </testsuite>
  <testsuite name="ObjectLiteral" timestamp="2021-11-25T09:16:23" tests="3" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0000" failures="0">
    <testcase name="base-generator: expressions literal expressions ObjectLiteral createObjectLiteral" time="0.0000" classname="createObjectLiteral">
    </testcase>
    <testcase name="base-generator: expressions literal expressions ObjectLiteral ObjectLiteral: Can remove property" time="0.0000" classname="ObjectLiteral: Can remove property">
    </testcase>
    <testcase name="base-generator: expressions literal expressions ObjectLiteral can use computed property" time="0.0000" classname="can use computed property">
    </testcase>
  </testsuite>
  <testsuite name="Operators" timestamp="2021-11-25T09:16:23" tests="4" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0010" failures="0">
    <testcase name="base-generator: expressions Operators Binary" time="0.0000" classname="Binary">
    </testcase>
    <testcase name="base-generator: expressions Operators instanceof" time="0.0000" classname="instanceof">
    </testcase>
    <testcase name="base-generator: expressions Operators Prefix" time="0.0000" classname="Prefix">
    </testcase>
    <testcase name="base-generator: expressions Operators Postfix" time="0.0010" classname="Postfix">
    </testcase>
  </testsuite>
  <testsuite name="Type expressions" timestamp="2021-11-25T09:16:23" tests="20" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0020" failures="0">
    <testcase name="base-generator: expressions Type expressions TypeQueryNode" time="0.0000" classname="TypeQueryNode">
    </testcase>
    <testcase name="base-generator: expressions Type expressions TypeReferenceNode" time="0.0000" classname="TypeReferenceNode">
    </testcase>
    <testcase name="base-generator: expressions Type expressions TypeReferenceNode with typeArguments" time="0.0000" classname="TypeReferenceNode with typeArguments">
    </testcase>
    <testcase name="base-generator: expressions Type expressions createTypeLiteralNode" time="0.0000" classname="createTypeLiteralNode">
    </testcase>
    <testcase name="base-generator: expressions Type expressions createTypeAliasDeclaration" time="0.0000" classname="createTypeAliasDeclaration">
    </testcase>
    <testcase name="base-generator: expressions Type expressions createTypeAliasDeclaration with TypeParameters" time="0.0000" classname="createTypeAliasDeclaration with TypeParameters">
    </testcase>
    <testcase name="base-generator: expressions Type expressions createTypeAliasDeclaration without modifiers" time="0.0000" classname="createTypeAliasDeclaration without modifiers">
    </testcase>
    <testcase name="base-generator: expressions Type expressions createIndexedAccessTypeNode" time="0.0000" classname="createIndexedAccessTypeNode">
    </testcase>
    <testcase name="base-generator: expressions Type expressions createIntersectionTypeNode" time="0.0000" classname="createIntersectionTypeNode">
    </testcase>
    <testcase name="base-generator: expressions Type expressions createOptionalTypeNode" time="0.0000" classname="createOptionalTypeNode">
    </testcase>
    <testcase name="base-generator: expressions Type expressions createUnionTypeNode" time="0.0000" classname="createUnionTypeNode">
    </testcase>
    <testcase name="base-generator: expressions Type expressions createTypeOperatorNode" time="0.0000" classname="createTypeOperatorNode">
    </testcase>
    <testcase name="base-generator: expressions Type expressions createParenthesizedType" time="0.0000" classname="createParenthesizedType">
    </testcase>
    <testcase name="base-generator: expressions Type expressions createIndexSignature" time="0.0000" classname="createIndexSignature">
    </testcase>
    <testcase name="base-generator: expressions Type expressions createQualifiedName" time="0.0010" classname="createQualifiedName">
    </testcase>
    <testcase name="base-generator: expressions Type expressions createMethodSignature" time="0.0000" classname="createMethodSignature">
    </testcase>
    <testcase name="base-generator: expressions Type expressions TypePredicateNodeWithModifier" time="0.0000" classname="TypePredicateNodeWithModifier">
    </testcase>
    <testcase name="base-generator: expressions Type expressions TupleTypeNode" time="0.0000" classname="TupleTypeNode">
    </testcase>
    <testcase name="base-generator: expressions Type expressions InferTypeNode" time="0.0000" classname="InferTypeNode">
    </testcase>
    <testcase name="base-generator: expressions Type expressions ConditionalTypeNode" time="0.0010" classname="ConditionalTypeNode">
    </testcase>
  </testsuite>
  <testsuite name="createPropertySignature" timestamp="2021-11-25T09:16:23" tests="6" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0010" failures="0">
    <testcase name="base-generator: expressions Type expressions createPropertySignature Only name is defined" time="0.0000" classname="Only name is defined">
    </testcase>
    <testcase name="base-generator: expressions Type expressions createPropertySignature with type" time="0.0000" classname="with type">
    </testcase>
    <testcase name="base-generator: expressions Type expressions createPropertySignature with question token" time="0.0000" classname="with question token">
    </testcase>
    <testcase name="base-generator: expressions Type expressions createPropertySignature with initializer" time="0.0000" classname="with initializer">
    </testcase>
    <testcase name="base-generator: expressions Type expressions createPropertySignature ExpressionWithTypeArguments with type arguments" time="0.0010" classname="ExpressionWithTypeArguments with type arguments">
    </testcase>
    <testcase name="base-generator: expressions Type expressions createPropertySignature ExpressionWithTypeArguments without type arguments" time="0.0000" classname="ExpressionWithTypeArguments without type arguments">
    </testcase>
  </testsuite>
  <testsuite name="TypeParameterDeclaration" timestamp="2021-11-25T09:16:23" tests="3" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0000" failures="0">
    <testcase name="base-generator: expressions Type expressions TypeParameterDeclaration only name is defined" time="0.0000" classname="only name is defined">
    </testcase>
    <testcase name="base-generator: expressions Type expressions TypeParameterDeclaration with constraint" time="0.0000" classname="with constraint">
    </testcase>
    <testcase name="base-generator: expressions Type expressions TypeParameterDeclaration with default" time="0.0000" classname="with default">
    </testcase>
  </testsuite>
  <testsuite name="getImports" timestamp="2021-11-25T09:16:23" tests="14" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0010" failures="0">
    <testcase name="base-generator: expressions Type expressions getImports TypeReferenceNode should return import if it is created in other module" time="0.0000" classname="TypeReferenceNode should return import if it is created in other module">
    </testcase>
    <testcase name="base-generator: expressions Type expressions getImports TypeReferenceNode on interface should return import if it is created in other module" time="0.0000" classname="TypeReferenceNode on interface should return import if it is created in other module">
    </testcase>
    <testcase name="base-generator: expressions Type expressions getImports TypeReferenceNode should not return import if it is created in this module" time="0.0000" classname="TypeReferenceNode should not return import if it is created in this module">
    </testcase>
    <testcase name="base-generator: expressions Type expressions getImports Do not add import if module has such import" time="0.0000" classname="Do not add import if module has such import">
    </testcase>
    <testcase name="base-generator: expressions Type expressions getImports TypeReferenceNode should not add import for global type" time="0.0000" classname="TypeReferenceNode should not add import for global type">
    </testcase>
    <testcase name="base-generator: expressions Type expressions getImports TypeReferenceNode should return from typeArguments" time="0.0000" classname="TypeReferenceNode should return from typeArguments">
    </testcase>
    <testcase name="base-generator: expressions Type expressions getImports imports should have duplicates" time="0.0000" classname="imports should have duplicates">
    </testcase>
    <testcase name="base-generator: expressions Type expressions getImports LiteralTypeNode" time="0.0000" classname="LiteralTypeNode">
    </testcase>
    <testcase name="base-generator: expressions Type expressions getImports UnionTypeNode" time="0.0000" classname="UnionTypeNode">
    </testcase>
    <testcase name="base-generator: expressions Type expressions getImports ArrayTypeNode" time="0.0000" classname="ArrayTypeNode">
    </testcase>
    <testcase name="base-generator: expressions Type expressions getImports ParenthesizedType" time="0.0000" classname="ParenthesizedType">
    </testcase>
    <testcase name="base-generator: expressions Type expressions getImports OptionalTypeNode" time="0.0000" classname="OptionalTypeNode">
    </testcase>
    <testcase name="base-generator: expressions Type expressions getImports FunctionalTypeNode" time="0.0010" classname="FunctionalTypeNode">
    </testcase>
    <testcase name="base-generator: expressions Type expressions getImports FunctionalTypeNode with token type" time="0.0000" classname="FunctionalTypeNode with token type">
    </testcase>
  </testsuite>
  <testsuite name="Statements" timestamp="2021-11-25T09:16:23" tests="6" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0020" failures="0">
    <testcase name="base-generator: expressions Statements ReturnStatement" time="0.0000" classname="ReturnStatement">
    </testcase>
    <testcase name="base-generator: expressions Statements createEmptyStatement" time="0.0010" classname="createEmptyStatement">
    </testcase>
    <testcase name="base-generator: expressions Statements createDebuggerStatement" time="0.0000" classname="createDebuggerStatement">
    </testcase>
    <testcase name="base-generator: expressions Statements Block" time="0.0000" classname="Block">
    </testcase>
    <testcase name="base-generator: expressions Statements CreateBreak" time="0.0000" classname="CreateBreak">
    </testcase>
    <testcase name="base-generator: expressions Statements CreateSuper" time="0.0010" classname="CreateSuper">
    </testcase>
  </testsuite>
  <testsuite name="Conditions" timestamp="2021-11-25T09:16:23" tests="2" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0010" failures="0">
    <testcase name="base-generator: expressions Conditions createConditional" time="0.0000" classname="createConditional">
    </testcase>
    <testcase name="base-generator: expressions Conditions createSwitch" time="0.0010" classname="createSwitch">
    </testcase>
  </testsuite>
  <testsuite name="If" timestamp="2021-11-25T09:16:23" tests="2" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0000" failures="0">
    <testcase name="base-generator: expressions Conditions If w/o else statement" time="0.0000" classname="w/o else statement">
    </testcase>
    <testcase name="base-generator: expressions Conditions If with else statement" time="0.0000" classname="with else statement">
    </testcase>
  </testsuite>
  <testsuite name="Property Assignment" timestamp="2021-11-25T09:16:23" tests="4" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0000" failures="0">
    <testcase name="base-generator: expressions Property Assignment PropertyAssignment" time="0.0000" classname="PropertyAssignment">
    </testcase>
    <testcase name="base-generator: expressions Property Assignment ShorthandPropertyAssignment" time="0.0000" classname="ShorthandPropertyAssignment">
    </testcase>
    <testcase name="base-generator: expressions Property Assignment ShorthandPropertyAssignment with expression" time="0.0000" classname="ShorthandPropertyAssignment with expression">
    </testcase>
    <testcase name="base-generator: expressions Property Assignment SpreadAssignment" time="0.0000" classname="SpreadAssignment">
    </testcase>
  </testsuite>
  <testsuite name="Property Access" timestamp="2021-11-25T09:16:23" tests="11" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0010" failures="0">
    <testcase name="base-generator: expressions Property Access PropertyAccess" time="0.0000" classname="PropertyAccess">
    </testcase>
    <testcase name="base-generator: expressions Property Access PropertyAccess compileStateSetting" time="0.0000" classname="PropertyAccess compileStateSetting">
    </testcase>
    <testcase name="base-generator: expressions Property Access PropertyAccess process props" time="0.0000" classname="PropertyAccess process props">
    </testcase>
    <testcase name="base-generator: expressions Property Access ElementAccess" time="0.0000" classname="ElementAccess">
    </testcase>
    <testcase name="base-generator: expressions Property Access createSpread" time="0.0000" classname="createSpread">
    </testcase>
    <testcase name="base-generator: expressions Property Access createPropertyAccessChain" time="0.0000" classname="createPropertyAccessChain">
    </testcase>
    <testcase name="base-generator: expressions Property Access createPropertyAccessChain without QuestionDotToken" time="0.0000" classname="createPropertyAccessChain without QuestionDotToken">
    </testcase>
    <testcase name="base-generator: expressions Property Access createElementAccessChain" time="0.0000" classname="createElementAccessChain">
    </testcase>
    <testcase name="base-generator: expressions Property Access createComputedPropertyName" time="0.0000" classname="createComputedPropertyName">
    </testcase>
    <testcase name="base-generator: expressions Property Access ElementAccess: getDependency should take into account index expression" time="0.0000" classname="ElementAccess: getDependency should take into account index expression">
    </testcase>
    <testcase name="base-generator: expressions Property Access Rename property in binding element" time="0.0010" classname="Rename property in binding element">
    </testcase>
  </testsuite>
  <testsuite name="Function" timestamp="2021-11-25T09:16:23" tests="0" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Parameter" timestamp="2021-11-25T09:16:23" tests="5" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0000" failures="0">
    <testcase name="base-generator: expressions Function Parameter Parameter w type and initializer" time="0.0000" classname="Parameter w type and initializer">
    </testcase>
    <testcase name="base-generator: expressions Function Parameter Simple Parameter" time="0.0000" classname="Simple Parameter">
    </testcase>
    <testcase name="base-generator: expressions Function Parameter Parameter w type" time="0.0000" classname="Parameter w type">
    </testcase>
    <testcase name="base-generator: expressions Function Parameter Parameter w initializer" time="0.0000" classname="Parameter w initializer">
    </testcase>
    <testcase name="base-generator: expressions Function Parameter Parameter with spread" time="0.0000" classname="Parameter with spread">
    </testcase>
  </testsuite>
  <testsuite name="Template string" timestamp="2021-11-25T09:16:23" tests="3" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0000" failures="0">
    <testcase name="base-generator: expressions Template string createTemplateExpression" time="0.0000" classname="createTemplateExpression">
    </testcase>
    <testcase name="base-generator: expressions Template string createTemplateExpression - convert to string concatenation" time="0.0000" classname="createTemplateExpression - convert to string concatenation">
    </testcase>
    <testcase name="base-generator: expressions Template string createNoSubstitutionTemplateLiteral" time="0.0000" classname="createNoSubstitutionTemplateLiteral">
    </testcase>
  </testsuite>
  <testsuite name="Cycle Expressions" timestamp="2021-11-25T09:16:23" tests="3" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0010" failures="0">
    <testcase name="base-generator: expressions Cycle Expressions While" time="0.0010" classname="While">
    </testcase>
    <testcase name="base-generator: expressions Cycle Expressions DoWhile" time="0.0000" classname="DoWhile">
    </testcase>
    <testcase name="base-generator: expressions Cycle Expressions ForIn" time="0.0000" classname="ForIn">
    </testcase>
  </testsuite>
  <testsuite name="For" timestamp="2021-11-25T09:16:23" tests="3" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0010" failures="0">
    <testcase name="base-generator: expressions Cycle Expressions For createFor" time="0.0000" classname="createFor">
    </testcase>
    <testcase name="base-generator: expressions Cycle Expressions For For without initializer, condition, incrementor" time="0.0010" classname="For without initializer, condition, incrementor">
    </testcase>
    <testcase name="base-generator: expressions Cycle Expressions For For: get dependency from initializer, condition, incrementor" time="0.0000" classname="For: get dependency from initializer, condition, incrementor">
    </testcase>
  </testsuite>
  <testsuite name="Variables" timestamp="2021-11-25T09:16:23" tests="2" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0000" failures="0">
    <testcase name="base-generator: expressions Variables VariableDeclaration" time="0.0000" classname="VariableDeclaration">
    </testcase>
    <testcase name="base-generator: expressions Variables VariableStatement" time="0.0000" classname="VariableStatement">
    </testcase>
  </testsuite>
  <testsuite name="VariableDeclarationList" timestamp="2021-11-25T09:16:23" tests="14" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0000" failures="0">
    <testcase name="base-generator: expressions Variables VariableDeclarationList toString" time="0.0000" classname="toString">
    </testcase>
    <testcase name="base-generator: expressions Variables VariableDeclarationList createVariableDeclaration - getVariableExpression" time="0.0000" classname="createVariableDeclaration - getVariableExpression">
    </testcase>
    <testcase name="base-generator: expressions Variables VariableDeclarationList createVariableDeclaration without initializer - getVariableExpression should return empty object" time="0.0000" classname="createVariableDeclaration without initializer - getVariableExpression should return empty object">
    </testcase>
    <testcase name="base-generator: expressions Variables VariableDeclarationList createVariableDeclaration - wrap expression in paren complex" time="0.0000" classname="createVariableDeclaration - wrap expression in paren complex">
    </testcase>
    <testcase name="base-generator: expressions Variables VariableDeclarationList getVariableExpression from VariableDeclaration" time="0.0000" classname="getVariableExpression from VariableDeclaration">
    </testcase>
    <testcase name="base-generator: expressions Variables VariableDeclarationList VariableDeclaration with object binding pattern - getVariableDeclaration" time="0.0000" classname="VariableDeclaration with object binding pattern - getVariableDeclaration">
    </testcase>
    <testcase name="base-generator: expressions Variables VariableDeclarationList VariableDeclaration with object binding pattern with string name - getVariableDeclaration" time="0.0000" classname="VariableDeclaration with object binding pattern with string name - getVariableDeclaration">
    </testcase>
    <testcase name="base-generator: expressions Variables VariableDeclarationList VariableDeclaration with array binding pattern - getVariableDeclaration" time="0.0000" classname="VariableDeclaration with array binding pattern - getVariableDeclaration">
    </testcase>
    <testcase name="base-generator: expressions Variables VariableDeclarationList can replace Identifer with expression" time="0.0000" classname="can replace Identifer with expression">
    </testcase>
    <testcase name="base-generator: expressions Variables VariableDeclarationList variable has value the same as name" time="0.0000" classname="variable has value the same as name">
    </testcase>
    <testcase name="base-generator: expressions Variables VariableDeclarationList can replace Identifer with expression in JSX self-closing element" time="0.0000" classname="can replace Identifer with expression in JSX self-closing element">
    </testcase>
    <testcase name="base-generator: expressions Variables VariableDeclarationList can replace Identifer with expression in JSX element" time="0.0000" classname="can replace Identifer with expression in JSX element">
    </testcase>
    <testcase name="base-generator: expressions Variables VariableDeclarationList PropertyAccess" time="0.0000" classname="PropertyAccess">
    </testcase>
    <testcase name="base-generator: expressions Variables VariableDeclarationList Can replace identifer in shorthand property assignment" time="0.0000" classname="Can replace identifer in shorthand property assignment">
    </testcase>
  </testsuite>
  <testsuite name="JSX" timestamp="2021-11-25T09:16:23" tests="8" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0010" failures="0">
    <testcase name="base-generator: expressions JSX createJsxText" time="0.0000" classname="createJsxText">
    </testcase>
    <testcase name="base-generator: expressions JSX createJsxSpreadAttribute" time="0.0000" classname="createJsxSpreadAttribute">
    </testcase>
    <testcase name="base-generator: expressions JSX createJsxExpression" time="0.0000" classname="createJsxExpression">
    </testcase>
    <testcase name="base-generator: expressions JSX JsxElement" time="0.0010" classname="JsxElement">
    </testcase>
    <testcase name="base-generator: expressions JSX getJsxOptions" time="0.0000" classname="getJsxOptions">
    </testcase>
    <testcase name="base-generator: expressions JSX JsxElement - trim string children" time="0.0000" classname="JsxElement - trim string children">
    </testcase>
    <testcase name="base-generator: expressions JSX booleanAttribute" time="0.0000" classname="booleanAttribute">
    </testcase>
    <testcase name="base-generator: expressions JSX JsxAttribute.getTemplateContext()" time="0.0000" classname="JsxAttribute.getTemplateContext()">
    </testcase>
  </testsuite>
  <testsuite name="BindingElement" timestamp="2021-11-25T09:16:23" tests="7" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0000" failures="0">
    <testcase name="base-generator: expressions BindingElement only name is set (decomposite object)" time="0.0000" classname="only name is set (decomposite object)">
    </testcase>
    <testcase name="base-generator: expressions BindingElement property name and name are set (decomposite object and rename)" time="0.0000" classname="property name and name are set (decomposite object and rename)">
    </testcase>
    <testcase name="base-generator: expressions BindingElement rest properties" time="0.0000" classname="rest properties">
    </testcase>
    <testcase name="base-generator: expressions BindingElement decomposite object with BindingPattern" time="0.0000" classname="decomposite object with BindingPattern">
    </testcase>
    <testcase name="base-generator: expressions BindingElement can remove all elements in binding pattern" time="0.0000" classname="can remove all elements in binding pattern">
    </testcase>
    <testcase name="base-generator: expressions BindingElement Object Binding pattern should sort items" time="0.0000" classname="Object Binding pattern should sort items">
    </testcase>
    <testcase name="base-generator: expressions BindingElement Do not sort array Binding Pattern" time="0.0000" classname="Do not sort array Binding Pattern">
    </testcase>
  </testsuite>
  <testsuite name="Class members" timestamp="2021-11-25T09:16:23" tests="7" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0030" failures="0">
    <testcase name="base-generator: expressions Class members Property" time="0.0010" classname="Property">
    </testcase>
    <testcase name="base-generator: expressions Class members Property.isReadOnly" time="0.0000" classname="Property.isReadOnly">
    </testcase>
    <testcase name="base-generator: expressions Class members Method" time="0.0010" classname="Method">
    </testcase>
    <testcase name="base-generator: expressions Class members Method with decorators, modifiers, type" time="0.0000" classname="Method with decorators, modifiers, type">
    </testcase>
    <testcase name="base-generator: expressions Class members Method with TypeParameters" time="0.0010" classname="Method with TypeParameters">
    </testcase>
    <testcase name="base-generator: expressions Class members GetAccessor" time="0.0000" classname="GetAccessor">
    </testcase>
    <testcase name="base-generator: expressions Class members GetAccessor with decorators and modifiers" time="0.0000" classname="GetAccessor with decorators and modifiers">
    </testcase>
  </testsuite>
  <testsuite name="isSvgSlot" timestamp="2021-11-25T09:16:23" tests="3" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0000" failures="0">
    <testcase name="base-generator: expressions Class members isSvgSlot @Slot({isSvg:true})" time="0.0000" classname="@Slot({isSvg:true})">
    </testcase>
    <testcase name="base-generator: expressions Class members isSvgSlot @Slot()" time="0.0000" classname="@Slot()">
    </testcase>
    <testcase name="base-generator: expressions Class members isSvgSlot @OneWay({isSvg: true})" time="0.0000" classname="@OneWay({isSvg: true})">
    </testcase>
  </testsuite>
  <testsuite name="Method.getDependency()" timestamp="2021-11-25T09:16:23" tests="2" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0000" failures="0">
    <testcase name="base-generator: expressions Class members Method.getDependency() should return dependency from other method if it used" time="0.0000" classname="should return dependency from other method if it used">
    </testcase>
    <testcase name="base-generator: expressions Class members Method.getDependency() should correctly resolve recursive dependency" time="0.0000" classname="should correctly resolve recursive dependency">
    </testcase>
  </testsuite>
  <testsuite name="class expressions" timestamp="2021-11-25T09:16:23" tests="5" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0010" failures="0">
    <testcase name="base-generator: expressions class expressions createHeritageClause" time="0.0000" classname="createHeritageClause">
    </testcase>
    <testcase name="base-generator: expressions class expressions createClassDeclaration without decorators and modifiers" time="0.0000" classname="createClassDeclaration without decorators and modifiers">
    </testcase>
    <testcase name="base-generator: expressions class expressions createClassDeclaration with modifiers and decorators" time="0.0000" classname="createClassDeclaration with modifiers and decorators">
    </testcase>
    <testcase name="base-generator: expressions class expressions createClassDeclaration with heritage clause" time="0.0010" classname="createClassDeclaration with heritage clause">
    </testcase>
    <testcase name="base-generator: expressions class expressions createClassDeclaration with members" time="0.0000" classname="createClassDeclaration with members">
    </testcase>
  </testsuite>
  <testsuite name="generic" timestamp="2021-11-25T09:16:23" tests="3" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0010" failures="0">
    <testcase name="base-generator: expressions class expressions generic createClassDeclaration generic class" time="0.0000" classname="createClassDeclaration generic class">
    </testcase>
    <testcase name="base-generator: expressions class expressions generic createClassDeclaration generic class with heritable" time="0.0010" classname="createClassDeclaration generic class with heritable">
    </testcase>
    <testcase name="base-generator: expressions class expressions generic create generic function with generic return" time="0.0000" classname="create generic function with generic return">
    </testcase>
  </testsuite>
  <testsuite name="import" timestamp="2021-11-25T09:16:23" tests="10" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0130" failures="0">
    <testcase name="base-generator: expressions import createImportDeclaration" time="0.0000" classname="createImportDeclaration">
    </testcase>
    <testcase name="base-generator: expressions import ImportDeclaration: can remove named import" time="0.0000" classname="ImportDeclaration: can remove named import">
    </testcase>
    <testcase name="base-generator: expressions import ImportDeclaration: remove named import if no named bindings" time="0.0000" classname="ImportDeclaration: remove named import if no named bindings">
    </testcase>
    <testcase name="base-generator: expressions import @devextreme-generator/declaration module should be an empty string" time="0.0000" classname="@devextreme-generator/declaration module should be an empty string">
    </testcase>
    <testcase name="base-generator: expressions import createNamespaceImport" time="0.0000" classname="createNamespaceImport">
    </testcase>
    <testcase name="base-generator: expressions import import global variable should fill context global" time="0.0040" classname="import global variable should fill context global">
    </testcase>
    <testcase name="base-generator: expressions import import module declaration with component shouldn&apos;t fill component if it is not imported" time="0.0030" classname="import module declaration with component shouldn&apos;t fill component if it is not imported">
    </testcase>
    <testcase name="base-generator: expressions import Add named imported component in context" time="0.0010" classname="Add named imported component in context">
    </testcase>
    <testcase name="base-generator: expressions import Import component in different folder with current module" time="0.0020" classname="Import component in different folder with current module">
    </testcase>
    <testcase name="base-generator: expressions import import module declaration with component should fill component if it is imported" time="0.0030" classname="import module declaration with component should fill component if it is imported">
    </testcase>
  </testsuite>
  <testsuite name="has" timestamp="2021-11-25T09:16:23" tests="3" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0010" failures="0">
    <testcase name="base-generator: expressions import has without default and named imports" time="0.0000" classname="without default and named imports">
    </testcase>
    <testcase name="base-generator: expressions import has with default import and named imports" time="0.0010" classname="with default import and named imports">
    </testcase>
    <testcase name="base-generator: expressions import has with namespace import" time="0.0000" classname="with namespace import">
    </testcase>
  </testsuite>
  <testsuite name="getVariableExpressions" timestamp="2021-11-25T09:16:23" tests="2" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0000" failures="0">
    <testcase name="base-generator: expressions import getVariableExpressions empty for @devextreme-generator/declaration" time="0.0000" classname="empty for @devextreme-generator/declaration">
    </testcase>
    <testcase name="base-generator: expressions import getVariableExpressions get Identifiers for imports" time="0.0000" classname="get Identifiers for imports">
    </testcase>
  </testsuite>
  <testsuite name="ImportClause: resolveImport" timestamp="2021-11-25T09:16:23" tests="2" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0000" failures="0">
    <testcase name="base-generator: expressions import getVariableExpressions ImportClause: resolveImport Named import" time="0.0000" classname="Named import">
    </testcase>
    <testcase name="base-generator: expressions import getVariableExpressions ImportClause: resolveImport Namespace import" time="0.0000" classname="Namespace import">
    </testcase>
  </testsuite>
  <testsuite name="export" timestamp="2021-11-25T09:16:23" tests="3" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0010" failures="0">
    <testcase name="base-generator: expressions export named exports" time="0.0000" classname="named exports">
    </testcase>
    <testcase name="base-generator: expressions export named exports with module specifier" time="0.0010" classname="named exports with module specifier">
    </testcase>
    <testcase name="base-generator: expressions export export all from module" time="0.0000" classname="export all from module">
    </testcase>
  </testsuite>
  <testsuite name="Interface" timestamp="2021-11-25T09:16:23" tests="4" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0010" failures="0">
    <testcase name="base-generator: expressions Interface empty interface" time="0.0000" classname="empty interface">
    </testcase>
    <testcase name="base-generator: expressions Interface interface with decorators, modifiers, and heritage clauses" time="0.0000" classname="interface with decorators, modifiers, and heritage clauses">
    </testcase>
    <testcase name="base-generator: expressions Interface with members" time="0.0000" classname="with members">
    </testcase>
    <testcase name="base-generator: expressions Interface generic interface" time="0.0010" classname="generic interface">
    </testcase>
  </testsuite>
  <testsuite name="Enum" timestamp="2021-11-25T09:16:23" tests="3" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0000" failures="0">
    <testcase name="base-generator: expressions Enum member" time="0.0000" classname="member">
    </testcase>
    <testcase name="base-generator: expressions Enum declaration" time="0.0000" classname="declaration">
    </testcase>
    <testcase name="base-generator: expressions Enum empty declaration" time="0.0000" classname="empty declaration">
    </testcase>
  </testsuite>
  <testsuite name="Module Declaration" timestamp="2021-11-25T09:16:23" tests="2" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0000" failures="0">
    <testcase name="base-generator: expressions Module Declaration shorthand module" time="0.0000" classname="shorthand module">
    </testcase>
    <testcase name="base-generator: expressions Module Declaration module with body" time="0.0000" classname="module with body">
    </testcase>
  </testsuite>
  <testsuite name="common" timestamp="2021-11-25T09:16:23" tests="5" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0010" failures="0">
    <testcase name="common SyntaxKind Keywords" time="0.0010" classname="SyntaxKind Keywords">
    </testcase>
    <testcase name="common SyntaxKind Tokens" time="0.0000" classname="SyntaxKind Tokens">
    </testcase>
    <testcase name="common processSourceFileName" time="0.0000" classname="processSourceFileName">
    </testcase>
  </testsuite>
  <testsuite name="Component" timestamp="2021-11-25T09:16:23" tests="4" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Component class with Component decorator is Component instance" time="0.0000" classname="class with Component decorator is Component instance">
    </testcase>
    <testcase name="Component should throw an error if more than one prop marked as isModel" time="0.0000" classname="should throw an error if more than one prop marked as isModel">
    </testcase>
    <testcase name="Component should generate empty block and spreadAccessor" time="0.0000" classname="should generate empty block and spreadAccessor">
    </testcase>
    <testcase name="Component extractGlobalsFromTemplate" time="0.0000" classname="extractGlobalsFromTemplate">
    </testcase>
  </testsuite>
  <testsuite name="ComponentInput" timestamp="2021-11-25T09:16:23" tests="2" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0000" failures="0">
    <testcase name="ComponentInput Add Component input to cache" time="0.0000" classname="Add Component input to cache">
    </testcase>
    <testcase name="ComponentInput Component input has heritage properties" time="0.0000" classname="Component input has heritage properties">
    </testcase>
  </testsuite>
  <testsuite name="Warnings" timestamp="2021-11-25T09:16:23" tests="10" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0030" failures="0">
    <testcase name="ComponentInput Warnings method" time="0.0010" classname="method">
    </testcase>
    <testcase name="ComponentInput Warnings property without decorator" time="0.0000" classname="property without decorator">
    </testcase>
    <testcase name="ComponentInput Warnings property with two decorators" time="0.0000" classname="property with two decorators">
    </testcase>
    <testcase name="ComponentInput Warnings Ref and ForwardRef props should not throw warnings" time="0.0010" classname="Ref and ForwardRef props should not throw warnings">
    </testcase>
    <testcase name="ComponentInput Warnings internal state" time="0.0000" classname="internal state">
    </testcase>
    <testcase name="ComponentInput Warnings reserved names" time="0.0010" classname="reserved names">
    </testcase>
    <testcase name="ComponentInput Warnings Prop and Api Method has same names - warning" time="0.0000" classname="Prop and Api Method has same names - warning">
    </testcase>
    <testcase name="ComponentInput Warnings Prop and Method has same names - no warning" time="0.0000" classname="Prop and Method has same names - no warning">
    </testcase>
    <testcase name="ComponentInput Warnings Nested component should not throw warn if one of types is TypeReferenceNode" time="0.0000" classname="Nested component should not throw warn if one of types is TypeReferenceNode">
    </testcase>
    <testcase name="ComponentInput Warnings Nested component should throw error with not TypeReferenceNode" time="0.0000" classname="Nested component should throw error with not TypeReferenceNode">
    </testcase>
  </testsuite>
  <testsuite name="Required props" timestamp="2021-11-25T09:16:23" tests="2" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0000" failures="0">
    <testcase name="ComponentInput Warnings Required props Component has one Required props - throw exception if they not included to component declaration" time="0.0000" classname="Component has one Required props - throw exception if they not included to component declaration">
    </testcase>
    <testcase name="ComponentInput Warnings Required props Component has one Required props" time="0.0000" classname="Component has one Required props">
    </testcase>
  </testsuite>
  <testsuite name="ComponentInput from type" timestamp="2021-11-25T09:16:23" tests="7" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0000" failures="0">
    <testcase name="ComponentInput from type Omit&lt;BaseProps, &apos;p1&apos;&gt;" time="0.0000" classname="Omit&lt;BaseProps, &apos;p1&apos;&gt;">
    </testcase>
    <testcase name="ComponentInput from type Omit&lt;BaseProps, &apos;p1&apos; | &apos;p3&apos;&gt;" time="0.0000" classname="Omit&lt;BaseProps, &apos;p1&apos; | &apos;p3&apos;&gt;">
    </testcase>
    <testcase name="ComponentInput from type Pick&lt;BaseProps, &apos;p1&apos;&gt;" time="0.0000" classname="Pick&lt;BaseProps, &apos;p1&apos;&gt;">
    </testcase>
    <testcase name="ComponentInput from type Pick&lt;BaseProps, 10&gt; - do not convert to component input" time="0.0000" classname="Pick&lt;BaseProps, 10&gt; - do not convert to component input">
    </testcase>
    <testcase name="ComponentInput from type Pick&lt;BaseProps, keyof BaseProps&gt;" time="0.0000" classname="Pick&lt;BaseProps, keyof BaseProps&gt;">
    </testcase>
    <testcase name="ComponentInput from type Pick &amp; Omit" time="0.0000" classname="Pick &amp; Omit">
    </testcase>
    <testcase name="ComponentInput from type Props1 &amp; Props2" time="0.0000" classname="Props1 &amp; Props2">
    </testcase>
  </testsuite>
  <testsuite name="import Components" timestamp="2021-11-25T09:16:23" tests="6" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0050" failures="0">
    <testcase name="import Components Parse imported component" time="0.0010" classname="Parse imported component">
    </testcase>
    <testcase name="import Components Parse imported component. module specifier has extension" time="0.0010" classname="Parse imported component. module specifier has extension">
    </testcase>
    <testcase name="import Components Get properties from heritageClause" time="0.0010" classname="Get properties from heritageClause">
    </testcase>
    <testcase name="import Components Get properties from heritageClause without import" time="0.0000" classname="Get properties from heritageClause without import">
    </testcase>
    <testcase name="import Components Parse imported component input" time="0.0010" classname="Parse imported component input">
    </testcase>
    <testcase name="import Components ComponentInput gets all members from heritage clause" time="0.0010" classname="ComponentInput gets all members from heritage clause">
    </testcase>
  </testsuite>
  <testsuite name="Expressions with toStringOptions should pass it in internal expressions" timestamp="2021-11-25T09:16:23" tests="3" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/base-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Expressions with toStringOptions should pass it in internal expressions Array literal" time="0.0000" classname="Array literal">
    </testcase>
    <testcase name="Expressions with toStringOptions should pass it in internal expressions Object literal" time="0.0000" classname="Object literal">
    </testcase>
    <testcase name="Expressions with toStringOptions should pass it in internal expressions Spread Assignment" time="0.0000" classname="Spread Assignment">
    </testcase>
  </testsuite>
  <testsuite name="code-compiler: gulp integration" timestamp="2021-11-25T09:16:23" tests="2" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/code-compiler.test.ts" time="0.0780" failures="0">
    <testcase name="code-compiler: gulp integration createCodeGenerator stream" time="0.0300" classname="createCodeGenerator stream">
    </testcase>
    <testcase name="code-compiler: gulp integration rename file name" time="0.0480" classname="rename file name">
    </testcase>
  </testsuite>
  <testsuite name="Gathering meta information about components" timestamp="2021-11-25T09:16:24" tests="2" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/code-compiler.test.ts" time="0.0310" failures="0">
    <testcase name="Gathering meta information about components Can not get meta without preliminary generation phase" time="0.0000" classname="Can not get meta without preliminary generation phase">
    </testcase>
    <testcase name="Gathering meta information about components Meta only contains generated components info" time="0.0310" classname="Meta only contains generated components info">
    </testcase>
  </testsuite>
  <testsuite name="jQuery" timestamp="2021-11-25T09:16:24" tests="3" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/code-compiler.test.ts" time="0.0420" failures="0">
    <testcase name="jQuery createCodeGenerator returns correct filename" time="0.0200" classname="createCodeGenerator returns correct filename">
    </testcase>
    <testcase name="jQuery can skip file from result" time="0.0150" classname="can skip file from result">
    </testcase>
    <testcase name="jQuery can skip file from result no data" time="0.0070" classname="can skip file from result no data">
    </testcase>
  </testsuite>
  <testsuite name="utils" timestamp="2021-11-25T09:16:24" tests="1" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/code-compiler.test.ts" time="0.0010" failures="0">
    <testcase name="utils delete folders" time="0.0010" classname="delete folders">
    </testcase>
  </testsuite>
  <testsuite name="inferno-generation" timestamp="2021-11-25T09:16:24" tests="36" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/inferno-generation.test.ts" time="0.5030" failures="0">
    <testcase name="inferno-generation class" time="0.0060" classname="class">
    </testcase>
    <testcase name="inferno-generation abstract-class" time="0.0050" classname="abstract-class">
    </testcase>
    <testcase name="inferno-generation props" time="0.0290" classname="props">
    </testcase>
    <testcase name="inferno-generation state" time="0.0340" classname="state">
    </testcase>
    <testcase name="inferno-generation state-short-operator" time="0.0270" classname="state-short-operator">
    </testcase>
    <testcase name="inferno-generation internal-state" time="0.0100" classname="internal-state">
    </testcase>
    <testcase name="inferno-generation component-input" time="0.0110" classname="component-input">
    </testcase>
    <testcase name="inferno-generation component-input-defaults" time="0.0190" classname="component-input-defaults">
    </testcase>
    <testcase name="inferno-generation effect" time="0.0250" classname="effect">
    </testcase>
    <testcase name="inferno-generation context" time="0.0150" classname="context">
    </testcase>
    <testcase name="inferno-generation dx-inner-widget" time="0.0100" classname="dx-inner-widget">
    </testcase>
    <testcase name="inferno-generation dx-widget-with-props" time="0.0080" classname="dx-widget-with-props">
    </testcase>
    <testcase name="inferno-generation spread-props-attribute" time="0.0120" classname="spread-props-attribute">
    </testcase>
    <testcase name="inferno-generation template" time="0.0200" classname="template">
    </testcase>
    <testcase name="inferno-generation method" time="0.0110" classname="method">
    </testcase>
    <testcase name="inferno-generation method-use-apiref" time="0.0100" classname="method-use-apiref">
    </testcase>
    <testcase name="inferno-generation import-component" time="0.0110" classname="import-component">
    </testcase>
    <testcase name="inferno-generation component-bindings-only" time="0.0050" classname="component-bindings-only">
    </testcase>
    <testcase name="inferno-generation refs" time="0.0240" classname="refs">
    </testcase>
    <testcase name="inferno-generation nested" time="0.0150" classname="nested">
    </testcase>
    <testcase name="inferno-generation nested-pick" time="0.0070" classname="nested-pick">
    </testcase>
    <testcase name="inferno-generation nested-props" time="0.0100" classname="nested-props">
    </testcase>
    <testcase name="inferno-generation export-default" time="0.0120" classname="export-default">
    </testcase>
    <testcase name="inferno-generation portal" time="0.0110" classname="portal">
    </testcase>
    <testcase name="inferno-generation mutable-state" time="0.0130" classname="mutable-state">
    </testcase>
    <testcase name="inferno-generation object-with-current" time="0.0110" classname="object-with-current">
    </testcase>
    <testcase name="inferno-generation jsx-function-in-view" time="0.0100" classname="jsx-function-in-view">
    </testcase>
    <testcase name="inferno-generation function-declaration" time="0.0030" classname="function-declaration">
    </testcase>
    <testcase name="inferno-generation jquery-empty" time="0.0070" classname="jquery-empty">
    </testcase>
    <testcase name="inferno-generation getter-with-complex-type" time="0.0180" classname="getter-with-complex-type">
    </testcase>
    <testcase name="inferno-generation inferno-will-update-base" time="0.0090" classname="inferno-will-update-base">
    </testcase>
    <testcase name="inferno-generation inferno-will-update-jquery" time="0.0080" classname="inferno-will-update-jquery">
    </testcase>
    <testcase name="inferno-generation inferno-will-update-effects" time="0.0090" classname="inferno-will-update-effects">
    </testcase>
    <testcase name="inferno-generation getters-is-memorized" time="0.0170" classname="getters-is-memorized">
    </testcase>
    <testcase name="inferno-generation getters-ordering" time="0.0280" classname="getters-ordering">
    </testcase>
    <testcase name="inferno-generation getters-destructuring" time="0.0230" classname="getters-destructuring">
    </testcase>
  </testsuite>
  <testsuite name="Default option rules" timestamp="2021-11-25T09:16:24" tests="1" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/inferno-generation.test.ts" time="0.0100" failures="0">
    <testcase name="inferno-generation Default option rules default-options-empty" time="0.0100" classname="default-options-empty">
    </testcase>
  </testsuite>
  <testsuite name="Inferno tests" timestamp="2021-11-25T09:16:24" tests="0" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/inferno-generator.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Expressions" timestamp="2021-11-25T09:16:24" tests="0" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/inferno-generator.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="jsx" timestamp="2021-11-25T09:16:24" tests="0" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/inferno-generator.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="JsxOpeningElement" timestamp="2021-11-25T09:16:24" tests="1" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/inferno-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Inferno tests Expressions jsx JsxOpeningElement Fragment" time="0.0000" classname="Fragment">
    </testcase>
  </testsuite>
  <testsuite name="JsxClosingElement" timestamp="2021-11-25T09:16:24" tests="1" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/inferno-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Inferno tests Expressions jsx JsxClosingElement Fragment" time="0.0000" classname="Fragment">
    </testcase>
  </testsuite>
  <testsuite name="ImportDeclaration" timestamp="2021-11-25T09:16:24" tests="4" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/inferno-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Inferno tests Expressions ImportDeclaration import Fragment from @devextreme-generator/declarations should import it from @devextreme/runtime/inferno" time="0.0000" classname="import Fragment from @devextreme-generator/declarations should import it from @devextreme/runtime/inferno">
    </testcase>
    <testcase name="Inferno tests Expressions ImportDeclaration import RefObject from @devextreme/runtime/inferno if Ref is imported" time="0.0000" classname="import RefObject from @devextreme/runtime/inferno if Ref is imported">
    </testcase>
    <testcase name="Inferno tests Expressions ImportDeclaration import RefObject from @devextreme/runtime/inferno if ForwardRef is imported" time="0.0000" classname="import RefObject from @devextreme/runtime/inferno if ForwardRef is imported">
    </testcase>
    <testcase name="Inferno tests Expressions ImportDeclaration import Component from @devextreme-generator/declarations should import it from @devextreme/runtime/inferno" time="0.0000" classname="import Component from @devextreme-generator/declarations should import it from @devextreme/runtime/inferno">
    </testcase>
  </testsuite>
  <testsuite name="GetAccessor" timestamp="2021-11-25T09:16:24" tests="0" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/inferno-generator.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="memorize getAccessor with complex type" timestamp="2021-11-25T09:16:24" tests="3" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/inferno-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Inferno tests Expressions GetAccessor memorize getAccessor with complex type Do not memorize union with simple type" time="0.0000" classname="Do not memorize union with simple type">
    </testcase>
    <testcase name="Inferno tests Expressions GetAccessor memorize getAccessor with complex type Memorize object literal type" time="0.0000" classname="Memorize object literal type">
    </testcase>
    <testcase name="Inferno tests Expressions GetAccessor memorize getAccessor with complex type Memorize Provider" time="0.0000" classname="Memorize Provider">
    </testcase>
  </testsuite>
  <testsuite name="GetAccessor cache" timestamp="2021-11-25T09:16:24" tests="4" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/inferno-generator.test.ts" time="0.0010" failures="0">
    <testcase name="Inferno tests Expressions GetAccessor GetAccessor cache Do not generate if simple type" time="0.0000" classname="Do not generate if simple type">
    </testcase>
    <testcase name="Inferno tests Expressions GetAccessor GetAccessor cache Create cache if component has getter with complex type" time="0.0000" classname="Create cache if component has getter with complex type">
    </testcase>
    <testcase name="Inferno tests Expressions GetAccessor GetAccessor cache generates componentWillUpdate and reset if dependant prop or state changes" time="0.0010" classname="generates componentWillUpdate and reset if dependant prop or state changes">
    </testcase>
    <testcase name="Inferno tests Expressions GetAccessor GetAccessor cache Do not generate if has mutable dependency" time="0.0000" classname="Do not generate if has mutable dependency">
    </testcase>
  </testsuite>
  <testsuite name="class-members/property" timestamp="2021-11-25T09:16:24" tests="0" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/inferno-generator.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="getDependencyString" timestamp="2021-11-25T09:16:24" tests="4" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/inferno-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Inferno tests Expressions class-members/property getDependencyString @Ref() p?:string" time="0.0000" classname="@Ref() p?:string">
    </testcase>
    <testcase name="Inferno tests Expressions class-members/property getDependencyString @RefProp() p?:string" time="0.0000" classname="@RefProp() p?:string">
    </testcase>
    <testcase name="Inferno tests Expressions class-members/property getDependencyString @Ref() p:string" time="0.0000" classname="@Ref() p:string">
    </testcase>
    <testcase name="Inferno tests Expressions class-members/property getDependencyString with unknown decorator should throw exception" time="0.0000" classname="with unknown decorator should throw exception">
    </testcase>
  </testsuite>
  <testsuite name="getDependency" timestamp="2021-11-25T09:16:24" tests="3" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/inferno-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Inferno tests Expressions class-members/property getDependency @Ref() p?:string" time="0.0000" classname="@Ref() p?:string">
    </testcase>
    <testcase name="Inferno tests Expressions class-members/property getDependency @RefProp() p?:string" time="0.0000" classname="@RefProp() p?:string">
    </testcase>
    <testcase name="Inferno tests Expressions class-members/property getDependency @Ref() p:string" time="0.0000" classname="@Ref() p:string">
    </testcase>
  </testsuite>
  <testsuite name="TypeReferenceNode" timestamp="2021-11-25T09:16:24" tests="1" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/inferno-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Inferno tests Expressions TypeReferenceNode JSXTemplate" time="0.0000" classname="JSXTemplate">
    </testcase>
  </testsuite>
  <testsuite name="inferno-generator: jQuery generation" timestamp="2021-11-25T09:16:24" tests="2" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/inferno-jquery-generation.test.ts" time="0.0190" failures="0">
    <testcase name="inferno-generator: jQuery generation jquery-empty" time="0.0080" classname="jquery-empty">
    </testcase>
    <testcase name="inferno-generator: jQuery generation jquery-with-default-options" time="0.0110" classname="jquery-with-default-options">
    </testcase>
  </testsuite>
  <testsuite name="preact-generator" timestamp="2021-11-25T09:16:25" tests="20" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/preact-generator.test.ts" time="0.2270" failures="0">
    <testcase name="preact-generator class" time="0.0050" classname="class">
    </testcase>
    <testcase name="preact-generator props-in-listener" time="0.0070" classname="props-in-listener">
    </testcase>
    <testcase name="preact-generator props" time="0.0170" classname="props">
    </testcase>
    <testcase name="preact-generator rest-styles" time="0.0140" classname="rest-styles">
    </testcase>
    <testcase name="preact-generator slots" time="0.0240" classname="slots">
    </testcase>
    <testcase name="preact-generator method-use-apiref" time="0.0130" classname="method-use-apiref">
    </testcase>
    <testcase name="preact-generator nested" time="0.0100" classname="nested">
    </testcase>
    <testcase name="preact-generator nested-props" time="0.0080" classname="nested-props">
    </testcase>
    <testcase name="preact-generator export-default" time="0.0060" classname="export-default">
    </testcase>
    <testcase name="preact-generator export-named" time="0.0060" classname="export-named">
    </testcase>
    <testcase name="preact-generator export-named-api-ref" time="0.0090" classname="export-named-api-ref">
    </testcase>
    <testcase name="preact-generator portal" time="0.0110" classname="portal">
    </testcase>
    <testcase name="preact-generator import-duplicate" time="0.0080" classname="import-duplicate">
    </testcase>
    <testcase name="preact-generator context" time="0.0110" classname="context">
    </testcase>
    <testcase name="preact-generator dx-widget-with-props" time="0.0110" classname="dx-widget-with-props">
    </testcase>
    <testcase name="preact-generator props-with-initial" time="0.0090" classname="props-with-initial">
    </testcase>
    <testcase name="preact-generator private" time="0.0090" classname="private">
    </testcase>
    <testcase name="preact-generator refs" time="0.0210" classname="refs">
    </testcase>
    <testcase name="preact-generator template" time="0.0160" classname="template">
    </testcase>
    <testcase name="preact-generator object-with-current" time="0.0120" classname="object-with-current">
    </testcase>
  </testsuite>
  <testsuite name="preact-generator: expressions" timestamp="2021-11-25T09:16:25" tests="2" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/preact-generator.test.ts" time="0.0000" failures="0">
    <testcase name="preact-generator: expressions import module without components, generator with empty context" time="0.0000" classname="import module without components, generator with empty context">
    </testcase>
    <testcase name="preact-generator: expressions empty expression" time="0.0000" classname="empty expression">
    </testcase>
  </testsuite>
  <testsuite name="Import statement with context" timestamp="2021-11-25T09:16:25" tests="1" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/preact-generator.test.ts" time="0.0000" failures="0">
    <testcase name="preact-generator: expressions Import statement with context Do not rename module without declaration" time="0.0000" classname="Do not rename module without declaration">
    </testcase>
  </testsuite>
  <testsuite name="JsxAttribute" timestamp="2021-11-25T09:16:25" tests="3" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/preact-generator.test.ts" time="0.0010" failures="0">
    <testcase name="preact-generator: expressions JsxAttribute dasherize attribute svg attribute" time="0.0000" classname="dasherize attribute svg attribute">
    </testcase>
    <testcase name="preact-generator: expressions JsxAttribute do not dasherize component prop" time="0.0010" classname="do not dasherize component prop">
    </testcase>
    <testcase name="preact-generator: expressions JsxAttribute do not dasherize not-kebab-case attribute" time="0.0000" classname="do not dasherize not-kebab-case attribute">
    </testcase>
  </testsuite>
  <testsuite name="Fragment" timestamp="2021-11-25T09:16:25" tests="1" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/preact-generator.test.ts" time="0.0000" failures="0">
    <testcase name="preact-generator: expressions Fragment React.Fragment -&gt; Preact.Fragment" time="0.0000" classname="React.Fragment -&gt; Preact.Fragment">
    </testcase>
  </testsuite>
  <testsuite name="Property: type declaration" timestamp="2021-11-25T09:16:25" tests="3" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/preact-generator.test.ts" time="0.0000" failures="0">
    <testcase name="preact-generator: expressions Property: type declaration Slot by default - any" time="0.0000" classname="Slot by default - any">
    </testcase>
    <testcase name="preact-generator: expressions Property: type declaration Slot with type with exclamation token - any" time="0.0000" classname="Slot with type with exclamation token - any">
    </testcase>
    <testcase name="preact-generator: expressions Property: type declaration Not Slot Property - use base type declaration" time="0.0000" classname="Not Slot Property - use base type declaration">
    </testcase>
  </testsuite>
  <testsuite name="import Components" timestamp="2021-11-25T09:16:25" tests="1" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/preact-generator.test.ts" time="0.0040" failures="0">
    <testcase name="import Components Heritage defaultProps. Base component and child component have defaultProps" time="0.0040" classname="Heritage defaultProps. Base component and child component have defaultProps">
    </testcase>
  </testsuite>
  <testsuite name="Import_Declaration" timestamp="2021-11-25T09:16:25" tests="1" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/preact-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Import_Declaration generates import for RefObject" time="0.0000" classname="generates import for RefObject">
    </testcase>
  </testsuite>
  <testsuite name="preact-generator: jQuery generation" timestamp="2021-11-25T09:16:25" tests="14" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/preact-generator.test.ts" time="0.1650" failures="0">
    <testcase name="preact-generator: jQuery generation jquery-empty" time="0.0150" classname="jquery-empty">
    </testcase>
    <testcase name="preact-generator: jQuery generation jquery-events" time="0.0100" classname="jquery-events">
    </testcase>
    <testcase name="preact-generator: jQuery generation jquery-without-modules" time="0.0110" classname="jquery-without-modules">
    </testcase>
    <testcase name="preact-generator: jQuery generation jquery-register-false" time="0.0100" classname="jquery-register-false">
    </testcase>
    <testcase name="preact-generator: jQuery generation jquery-api" time="0.0150" classname="jquery-api">
    </testcase>
    <testcase name="preact-generator: jQuery generation jquery-template" time="0.0080" classname="jquery-template">
    </testcase>
    <testcase name="preact-generator: jQuery generation jquery-props-info" time="0.0170" classname="jquery-props-info">
    </testcase>
    <testcase name="preact-generator: jQuery generation jquery-custom-base" time="0.0070" classname="jquery-custom-base">
    </testcase>
    <testcase name="preact-generator: jQuery generation jquery-custom-named-base" time="0.0080" classname="jquery-custom-named-base">
    </testcase>
    <testcase name="preact-generator: jQuery generation jquery-custom-base-with-module-import" time="0.0120" classname="jquery-custom-base-with-module-import">
    </testcase>
    <testcase name="preact-generator: jQuery generation jquery-export-named" time="0.0080" classname="jquery-export-named">
    </testcase>
    <testcase name="preact-generator: jQuery generation jquery-element-type" time="0.0150" classname="jquery-element-type">
    </testcase>
    <testcase name="preact-generator: jQuery generation jquery-api-wrapper" time="0.0160" classname="jquery-api-wrapper">
    </testcase>
    <testcase name="preact-generator: jQuery generation should throw an error with TwoWay props without initializer" time="0.0130" classname="should throw an error with TwoWay props without initializer">
    </testcase>
  </testsuite>
  <testsuite name="react-generation" timestamp="2021-11-25T09:16:25" tests="83" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/react-generation.test.ts" time="0.9420" failures="0">
    <testcase name="react-generation variable-declaration" time="0.0040" classname="variable-declaration">
    </testcase>
    <testcase name="react-generation functions" time="0.0090" classname="functions">
    </testcase>
    <testcase name="react-generation class" time="0.0040" classname="class">
    </testcase>
    <testcase name="react-generation abstract-class" time="0.0040" classname="abstract-class">
    </testcase>
    <testcase name="react-generation objects" time="0.0040" classname="objects">
    </testcase>
    <testcase name="react-generation conditions" time="0.0030" classname="conditions">
    </testcase>
    <testcase name="react-generation expressions" time="0.0050" classname="expressions">
    </testcase>
    <testcase name="react-generation empty-component" time="0.0120" classname="empty-component">
    </testcase>
    <testcase name="react-generation props" time="0.0200" classname="props">
    </testcase>
    <testcase name="react-generation props-name-collision" time="0.0090" classname="props-name-collision">
    </testcase>
    <testcase name="react-generation getter-with-complex-type" time="0.0150" classname="getter-with-complex-type">
    </testcase>
    <testcase name="react-generation rest-styles" time="0.0100" classname="rest-styles">
    </testcase>
    <testcase name="react-generation runtime-import" time="0.0020" classname="runtime-import">
    </testcase>
    <testcase name="react-generation context" time="0.0120" classname="context">
    </testcase>
    <testcase name="react-generation internal-state" time="0.0070" classname="internal-state">
    </testcase>
    <testcase name="react-generation model" time="0.0120" classname="model">
    </testcase>
    <testcase name="react-generation state" time="0.0240" classname="state">
    </testcase>
    <testcase name="react-generation listen" time="0.0070" classname="listen">
    </testcase>
    <testcase name="react-generation listen-with-target" time="0.0060" classname="listen-with-target">
    </testcase>
    <testcase name="react-generation props-in-listener" time="0.0060" classname="props-in-listener">
    </testcase>
    <testcase name="react-generation dx-inner-widget" time="0.0110" classname="dx-inner-widget">
    </testcase>
    <testcase name="react-generation dx-widget-with-template" time="0.0090" classname="dx-widget-with-template">
    </testcase>
    <testcase name="react-generation template" time="0.0220" classname="template">
    </testcase>
    <testcase name="react-generation template-pass" time="0.0090" classname="template-pass">
    </testcase>
    <testcase name="react-generation template-transit" time="0.0100" classname="template-transit">
    </testcase>
    <testcase name="react-generation Throw error if ref is passed to template" time="0.0040" classname="Throw error if ref is passed to template">
    </testcase>
    <testcase name="react-generation refs" time="0.0180" classname="refs">
    </testcase>
    <testcase name="react-generation refs-as-props" time="0.0100" classname="refs-as-props">
    </testcase>
    <testcase name="react-generation same-type-ref" time="0.0080" classname="same-type-ref">
    </testcase>
    <testcase name="react-generation dx-widget-with-ref-prop" time="0.0060" classname="dx-widget-with-ref-prop">
    </testcase>
    <testcase name="react-generation effect" time="0.0130" classname="effect">
    </testcase>
    <testcase name="react-generation slots" time="0.0050" classname="slots">
    </testcase>
    <testcase name="react-generation method" time="0.0120" classname="method">
    </testcase>
    <testcase name="react-generation method-use-apiref" time="0.0080" classname="method-use-apiref">
    </testcase>
    <testcase name="react-generation mutable-state" time="0.0120" classname="mutable-state">
    </testcase>
    <testcase name="react-generation component-input" time="0.0270" classname="component-input">
    </testcase>
    <testcase name="react-generation component-input-defaults" time="0.0340" classname="component-input-defaults">
    </testcase>
    <testcase name="react-generation component-bindings-only" time="0.0060" classname="component-bindings-only">
    </testcase>
    <testcase name="react-generation import-component" time="0.0120" classname="import-component">
    </testcase>
    <testcase name="react-generation import-component-named" time="0.0080" classname="import-component-named">
    </testcase>
    <testcase name="react-generation import-duplicate" time="0.0070" classname="import-duplicate">
    </testcase>
    <testcase name="react-generation implements" time="0.0100" classname="implements">
    </testcase>
    <testcase name="react-generation two-way-props" time="0.0160" classname="two-way-props">
    </testcase>
    <testcase name="react-generation cycle-dependencies" time="0.0030" classname="cycle-dependencies">
    </testcase>
    <testcase name="react-generation nested" time="0.0270" classname="nested">
    </testcase>
    <testcase name="react-generation nested-props" time="0.0120" classname="nested-props">
    </testcase>
    <testcase name="react-generation forward-ref-template" time="0.0150" classname="forward-ref-template">
    </testcase>
    <testcase name="react-generation forward-ref-parent" time="0.0170" classname="forward-ref-parent">
    </testcase>
    <testcase name="react-generation forward-ref-child" time="0.0170" classname="forward-ref-child">
    </testcase>
    <testcase name="react-generation export-default" time="0.0100" classname="export-default">
    </testcase>
    <testcase name="react-generation export-named" time="0.0100" classname="export-named">
    </testcase>
    <testcase name="react-generation export-named-api-ref" time="0.0110" classname="export-named-api-ref">
    </testcase>
    <testcase name="react-generation jquery-custom-base" time="0.0090" classname="jquery-custom-base">
    </testcase>
    <testcase name="react-generation portal" time="0.0130" classname="portal">
    </testcase>
    <testcase name="react-generation pick-props" time="0.0130" classname="pick-props">
    </testcase>
    <testcase name="react-generation svg-element" time="0.0090" classname="svg-element">
    </testcase>
    <testcase name="react-generation dx-widget-with-props" time="0.0080" classname="dx-widget-with-props">
    </testcase>
    <testcase name="react-generation props-with-initial" time="0.0060" classname="props-with-initial">
    </testcase>
    <testcase name="react-generation import-type" time="0.0110" classname="import-type">
    </testcase>
    <testcase name="react-generation private" time="0.0080" classname="private">
    </testcase>
    <testcase name="react-generation view-without-tag" time="0.0060" classname="view-without-tag">
    </testcase>
    <testcase name="react-generation view-without-tag-arrow" time="0.0060" classname="view-without-tag-arrow">
    </testcase>
    <testcase name="react-generation spread-in-view" time="0.0080" classname="spread-in-view">
    </testcase>
    <testcase name="react-generation template-default-value" time="0.0200" classname="template-default-value">
    </testcase>
    <testcase name="react-generation dynamic-component" time="0.0300" classname="dynamic-component">
    </testcase>
    <testcase name="react-generation dynamic-components-array" time="0.0120" classname="dynamic-components-array">
    </testcase>
    <testcase name="react-generation jsx-template-spread" time="0.0140" classname="jsx-template-spread">
    </testcase>
    <testcase name="react-generation template-from-destructuring" time="0.0070" classname="template-from-destructuring">
    </testcase>
    <testcase name="react-generation object-with-current" time="0.0070" classname="object-with-current">
    </testcase>
    <testcase name="react-generation nested-default" time="0.0150" classname="nested-default">
    </testcase>
    <testcase name="react-generation nested-default-props" time="0.0060" classname="nested-default-props">
    </testcase>
    <testcase name="react-generation nested-pick" time="0.0040" classname="nested-pick">
    </testcase>
    <testcase name="react-generation nested-props-and-component" time="0.0500" classname="nested-props-and-component">
    </testcase>
    <testcase name="react-generation nested-inherited" time="0.0100" classname="nested-inherited">
    </testcase>
    <testcase name="react-generation types" time="0.0110" classname="types">
    </testcase>
    <testcase name="react-generation types-external" time="0.0090" classname="types-external">
    </testcase>
    <testcase name="react-generation getters-is-memorized" time="0.0140" classname="getters-is-memorized">
    </testcase>
    <testcase name="react-generation getters-ordering" time="0.0190" classname="getters-ordering">
    </testcase>
    <testcase name="react-generation invalid-method-parameters" time="0.0020" classname="invalid-method-parameters">
    </testcase>
    <testcase name="react-generation getters-destructuring" time="0.0150" classname="getters-destructuring">
    </testcase>
    <testcase name="react-generation dom_component_wrapper" time="0.0070" classname="dom_component_wrapper">
    </testcase>
    <testcase name="react-generation component-wrapper" time="0.0080" classname="component-wrapper">
    </testcase>
    <testcase name="react-generation method-use-api-forwardRef" time="0.0110" classname="method-use-api-forwardRef">
    </testcase>
  </testsuite>
  <testsuite name="Default option rules" timestamp="2021-11-25T09:16:26" tests="4" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/react-generation.test.ts" time="0.0330" failures="0">
    <testcase name="react-generation Default option rules default-options-empty" time="0.0080" classname="default-options-empty">
    </testcase>
    <testcase name="react-generation Default option rules required-props" time="0.0070" classname="required-props">
    </testcase>
    <testcase name="react-generation Default option rules use-external-component-bindings" time="0.0070" classname="use-external-component-bindings">
    </testcase>
    <testcase name="react-generation Default option rules default-options-with-state" time="0.0110" classname="default-options-with-state">
    </testcase>
  </testsuite>
  <testsuite name="react-generator: expressions" timestamp="2021-11-25T09:16:26" tests="4" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/react-generator.test.ts" time="0.0000" failures="0">
    <testcase name="react-generator: expressions JsxElement. Fragment -&gt; React.Fragment" time="0.0000" classname="JsxElement. Fragment -&gt; React.Fragment">
    </testcase>
    <testcase name="react-generator: expressions JsxElement - trim string children" time="0.0000" classname="JsxElement - trim string children">
    </testcase>
    <testcase name="react-generator: expressions empty expression" time="0.0000" classname="empty expression">
    </testcase>
    <testcase name="react-generator: expressions JsxAttribute without initializer" time="0.0000" classname="JsxAttribute without initializer">
    </testcase>
  </testsuite>
  <testsuite name="Methods" timestamp="2021-11-25T09:16:26" tests="0" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/react-generator.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="GetAccessor" timestamp="2021-11-25T09:16:26" tests="5" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/react-generator.test.ts" time="0.0000" failures="0">
    <testcase name="react-generator: expressions Methods GetAccessor type declaration with defined type" time="0.0000" classname="type declaration with defined type">
    </testcase>
    <testcase name="react-generator: expressions Methods GetAccessor type declaration with undefined type" time="0.0000" classname="type declaration with undefined type">
    </testcase>
    <testcase name="react-generator: expressions Methods GetAccessor JSXTemplate type" time="0.0000" classname="JSXTemplate type">
    </testcase>
    <testcase name="react-generator: expressions Methods GetAccessor JSXTemplate type with required" time="0.0000" classname="JSXTemplate type with required">
    </testcase>
    <testcase name="react-generator: expressions Methods GetAccessor getter is call" time="0.0000" classname="getter is call">
    </testcase>
  </testsuite>
  <testsuite name="Abstract method" timestamp="2021-11-25T09:16:26" tests="3" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/react-generator.test.ts" time="0.0000" failures="0">
    <testcase name="react-generator: expressions Methods Abstract method abstract method with modifier and without body" time="0.0000" classname="abstract method with modifier and without body">
    </testcase>
    <testcase name="react-generator: expressions Methods Abstract method abstract method without modifier and without body" time="0.0000" classname="abstract method without modifier and without body">
    </testcase>
    <testcase name="react-generator: expressions Methods Abstract method abstract method with modifier and body" time="0.0000" classname="abstract method with modifier and body">
    </testcase>
  </testsuite>
  <testsuite name="React Component" timestamp="2021-11-25T09:16:26" tests="0" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/react-generator.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="View" timestamp="2021-11-25T09:16:26" tests="8" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/react-generator.test.ts" time="0.0020" failures="0">
    <testcase name="React Component View Can destruct template and slot" time="0.0010" classname="Can destruct template and slot">
    </testcase>
    <testcase name="React Component View Can rename template in destruct object" time="0.0000" classname="Can rename template in destruct object">
    </testcase>
    <testcase name="React Component View Can destruct named slot" time="0.0000" classname="Can destruct named slot">
    </testcase>
    <testcase name="React Component View Do not modify state" time="0.0010" classname="Do not modify state">
    </testcase>
    <testcase name="React Component View Do not modify internal state" time="0.0000" classname="Do not modify internal state">
    </testcase>
    <testcase name="React Component View Access to GetAccessor as usual property" time="0.0000" classname="Access to GetAccessor as usual property">
    </testcase>
    <testcase name="React Component View Template property should not be excluded from binding pattern" time="0.0000" classname="Template property should not be excluded from binding pattern">
    </testcase>
    <testcase name="React Component View getHeritageProperties" time="0.0000" classname="getHeritageProperties">
    </testcase>
  </testsuite>
  <testsuite name="Template transformations" timestamp="2021-11-25T09:16:26" tests="6" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/react-generator.test.ts" time="0.0030" failures="0">
    <testcase name="React Component View Template transformations Do not wrap with {} if view is template call" time="0.0000" classname="Do not wrap with {} if view is template call">
    </testcase>
    <testcase name="React Component View Template transformations Wrap with {} if template call is single SelfClosing child expression" time="0.0010" classname="Wrap with {} if template call is single SelfClosing child expression">
    </testcase>
    <testcase name="React Component View Template transformations Wrap with {} if template call is single JsxElement child expression" time="0.0000" classname="Wrap with {} if template call is single JsxElement child expression">
    </testcase>
    <testcase name="React Component View Template transformations Do not wrap with {} if template call is already wrapped (not a single child expression)" time="0.0010" classname="Do not wrap with {} if template call is already wrapped (not a single child expression)">
    </testcase>
    <testcase name="React Component View Template transformations Collect all template props to single argument" time="0.0010" classname="Collect all template props to single argument">
    </testcase>
    <testcase name="React Component View Template transformations Pass empty object as argument if no props passed to template (type is function with params)" time="0.0000" classname="Pass empty object as argument if no props passed to template (type is function with params)">
    </testcase>
  </testsuite>
  <testsuite name="import Components" timestamp="2021-11-25T09:16:26" tests="11" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/react-generator.test.ts" time="0.0120" failures="0">
    <testcase name="import Components Get properties from heritageClause" time="0.0010" classname="Get properties from heritageClause">
    </testcase>
    <testcase name="import Components Get properties from heritageClause" time="0.0040" classname="Get properties from heritageClause">
    </testcase>
    <testcase name="import Components Heritage defaultProps. Base component has defaultProps, component has not" time="0.0010" classname="Heritage defaultProps. Base component has defaultProps, component has not">
    </testcase>
    <testcase name="import Components Heritage defaultProps. Base component has not defaultProps, component has not" time="0.0000" classname="Heritage defaultProps. Base component has not defaultProps, component has not">
    </testcase>
    <testcase name="import Components Heritage defaultProps. Base component and child component have defaultProps" time="0.0020" classname="Heritage defaultProps. Base component and child component have defaultProps">
    </testcase>
    <testcase name="import Components Heritage defaultProps. Base component has not default props, child component has defaultProps" time="0.0010" classname="Heritage defaultProps. Base component has not default props, child component has defaultProps">
    </testcase>
    <testcase name="import Components ComponentInput gets all members from heritage clause" time="0.0010" classname="ComponentInput gets all members from heritage clause">
    </testcase>
    <testcase name="import Components ComponentInput inherit members - can redefine member" time="0.0010" classname="ComponentInput inherit members - can redefine member">
    </testcase>
    <testcase name="import Components ComponentInput - doesn&apos;t have properties without initializer" time="0.0000" classname="ComponentInput - doesn&apos;t have properties without initializer">
    </testcase>
    <testcase name="import Components ComponentInput should generate default and change for state property" time="0.0000" classname="ComponentInput should generate default and change for state property">
    </testcase>
    <testcase name="import Components ComponentInput should not generate change for state property if it has one" time="0.0010" classname="ComponentInput should not generate change for state property if it has one">
    </testcase>
  </testsuite>
  <testsuite name="Widget in jsx element" timestamp="2021-11-25T09:16:26" tests="1" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/react-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Widget in jsx element Do not rename attribute if it has same name with getter" time="0.0000" classname="Do not rename attribute if it has same name with getter">
    </testcase>
  </testsuite>
  <testsuite name="React: Expressions with props/state/internal state" timestamp="2021-11-25T09:16:26" tests="31" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/react-generator.test.ts" time="0.0050" failures="0">
    <testcase name="React: Expressions with props/state/internal state PropertyAccess. Prop" time="0.0000" classname="PropertyAccess. Prop">
    </testcase>
    <testcase name="React: Expressions with props/state/internal state Property access. this.props.p1" time="0.0000" classname="Property access. this.props.p1">
    </testcase>
    <testcase name="React: Expressions with props/state/internal state Not member Property access." time="0.0000" classname="Not member Property access.">
    </testcase>
    <testcase name="React: Expressions with props/state/internal state Property access. this.props" time="0.0000" classname="Property access. this.props">
    </testcase>
    <testcase name="React: Expressions with props/state/internal state PropertyAccess. State" time="0.0000" classname="PropertyAccess. State">
    </testcase>
    <testcase name="React: Expressions with props/state/internal state PropertyAccess. State in props" time="0.0000" classname="PropertyAccess. State in props">
    </testcase>
    <testcase name="React: Expressions with props/state/internal state PropertyAccess. Internal State" time="0.0000" classname="PropertyAccess. Internal State">
    </testcase>
    <testcase name="React: Expressions with props/state/internal state PropertyAccess. Dependencies on assignment" time="0.0000" classname="PropertyAccess. Dependencies on assignment">
    </testcase>
    <testcase name="React: Expressions with props/state/internal state = operator for state - set state and raise change state" time="0.0010" classname="= operator for state - set state and raise change state">
    </testcase>
    <testcase name="React: Expressions with props/state/internal state = operator for state - add .? token if change property has not initializer" time="0.0000" classname="= operator for state - add .? token if change property has not initializer">
    </testcase>
    <testcase name="React: Expressions with props/state/internal state = operator for state - do not add token if change property has exclamation token" time="0.0000" classname="= operator for state - do not add token if change property has exclamation token">
    </testcase>
    <testcase name="React: Expressions with props/state/internal state = operator for internal state - call __state_set..." time="0.0000" classname="= operator for internal state - call __state_set...">
    </testcase>
    <testcase name="React: Expressions with props/state/internal state set object literal in state" time="0.0010" classname="set object literal in state">
    </testcase>
    <testcase name="React: Expressions with props/state/internal state = operator for prop - throw error" time="0.0000" classname="= operator for prop - throw error">
    </testcase>
    <testcase name="React: Expressions with props/state/internal state Binary operator returns dependency for both side" time="0.0000" classname="Binary operator returns dependency for both side">
    </testcase>
    <testcase name="React: Expressions with props/state/internal state Set ref.InnerHtml" time="0.0000" classname="Set ref.InnerHtml">
    </testcase>
    <testcase name="React: Expressions with props/state/internal state Set ref.InnerHtml unary" time="0.0010" classname="Set ref.InnerHtml unary">
    </testcase>
    <testcase name="React: Expressions with props/state/internal state Set ref.InnerHtml short operator" time="0.0000" classname="Set ref.InnerHtml short operator">
    </testcase>
    <testcase name="React: Expressions with props/state/internal state VariableDeclarationList return dependency for initializer" time="0.0000" classname="VariableDeclarationList return dependency for initializer">
    </testcase>
    <testcase name="React: Expressions with props/state/internal state VariableDeclaration returns dependency for Binding Pattern" time="0.0000" classname="VariableDeclaration returns dependency for Binding Pattern">
    </testcase>
    <testcase name="React: Expressions with props/state/internal state VariableDeclaration returns all props dependency if binding element have rest operator" time="0.0000" classname="VariableDeclaration returns all props dependency if binding element have rest operator">
    </testcase>
    <testcase name="React: Expressions with props/state/internal state Arrow Function. Can set state" time="0.0000" classname="Arrow Function. Can set state">
    </testcase>
    <testcase name="React: Expressions with props/state/internal state Arrow Function. Can set internal state" time="0.0010" classname="Arrow Function. Can set internal state">
    </testcase>
    <testcase name="React: Expressions with props/state/internal state Arrow Function. Can set prop in state" time="0.0000" classname="Arrow Function. Can set prop in state">
    </testcase>
    <testcase name="React: Expressions with props/state/internal state PropertyAccess should replace componentContext on newComponentContext" time="0.0000" classname="PropertyAccess should replace componentContext on newComponentContext">
    </testcase>
    <testcase name="React: Expressions with props/state/internal state createPropertyAccessChain" time="0.0010" classname="createPropertyAccessChain">
    </testcase>
    <testcase name="React: Expressions with props/state/internal state createCallChain with props, state internal state in args" time="0.0000" classname="createCallChain with props, state internal state in args">
    </testcase>
    <testcase name="React: Expressions with props/state/internal state createCallChain with props, in expression" time="0.0000" classname="createCallChain with props, in expression">
    </testcase>
    <testcase name="React: Expressions with props/state/internal state Method should return dependency for all properties" time="0.0000" classname="Method should return dependency for all properties">
    </testcase>
    <testcase name="React: Expressions with props/state/internal state Method should not return dependency for unknown property" time="0.0000" classname="Method should not return dependency for unknown property">
    </testcase>
    <testcase name="React: Expressions with props/state/internal state Method should include single props if there is props in dependency" time="0.0000" classname="Method should include single props if there is props in dependency">
    </testcase>
  </testsuite>
  <testsuite name="ComponentInput" timestamp="2021-11-25T09:16:26" tests="5" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/react-generator.test.ts" time="0.0020" failures="0">
    <testcase name="ComponentInput Create Component Input" time="0.0000" classname="Create Component Input">
    </testcase>
    <testcase name="ComponentInput Component input has heritage properties" time="0.0010" classname="Component input has heritage properties">
    </testcase>
    <testcase name="ComponentInput Add Render+Component for Template property: template-&gt;render+component" time="0.0000" classname="Add Render+Component for Template property: template-&gt;render+component">
    </testcase>
    <testcase name="ComponentInput Should replace template property with JSXTemplate type" time="0.0000" classname="Should replace template property with JSXTemplate type">
    </testcase>
    <testcase name="ComponentInput Add Render+Component for Template property: contentTemplate-&gt;contentRender+contentComponent" time="0.0010" classname="Add Render+Component for Template property: contentTemplate-&gt;contentRender+contentComponent">
    </testcase>
  </testsuite>
  <testsuite name="Required prop" timestamp="2021-11-25T09:16:26" tests="1" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/react-generator.test.ts" time="0.0000" failures="0">
    <testcase name="ComponentInput Required prop Type declaration should have exclamation token" time="0.0000" classname="Type declaration should have exclamation token">
    </testcase>
  </testsuite>
  <testsuite name="CompileViewModelArguments" timestamp="2021-11-25T09:16:26" tests="6" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/react-generator.test.ts" time="0.0040" failures="0">
    <testcase name="ComponentInput CompileViewModelArguments Empty input with empty component" time="0.0010" classname="Empty input with empty component">
    </testcase>
    <testcase name="ComponentInput CompileViewModelArguments Prop in input with empty component" time="0.0000" classname="Prop in input with empty component">
    </testcase>
    <testcase name="ComponentInput CompileViewModelArguments State in input - extended props with state getter in viewModes args" time="0.0010" classname="State in input - extended props with state getter in viewModes args">
    </testcase>
    <testcase name="ComponentInput CompileViewModelArguments component with internal state - add internal state to viewModel args" time="0.0010" classname="component with internal state - add internal state to viewModel args">
    </testcase>
    <testcase name="ComponentInput CompileViewModelArguments Pass getter result in viewModel arguments" time="0.0000" classname="Pass getter result in viewModel arguments">
    </testcase>
    <testcase name="ComponentInput CompileViewModelArguments Exclude private members" time="0.0010" classname="Exclude private members">
    </testcase>
  </testsuite>
  <testsuite name="Property. getters, getDependency" timestamp="2021-11-25T09:16:26" tests="4" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/react-generator.test.ts" time="0.0000" failures="0">
    <testcase name="ComponentInput Property. getters, getDependency Property with unknown decorator should throw error" time="0.0000" classname="Property with unknown decorator should throw error">
    </testcase>
    <testcase name="ComponentInput Property. getters, getDependency Property with unknown decorator should throw error" time="0.0000" classname="Property with unknown decorator should throw error">
    </testcase>
    <testcase name="ComponentInput Property. getters, getDependency Should throw an error if *Render prop defined along with *Template" time="0.0000" classname="Should throw an error if *Render prop defined along with *Template">
    </testcase>
    <testcase name="ComponentInput Property. getters, getDependency Should throw an error if *Component prop defined along with *Template" time="0.0000" classname="Should throw an error if *Component prop defined along with *Template">
    </testcase>
  </testsuite>
  <testsuite name="Property. getters, getDependencyString" timestamp="2021-11-25T09:16:26" tests="1" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/react-generator.test.ts" time="0.0000" failures="0">
    <testcase name="ComponentInput Property. getters, getDependencyString Property without decorators should be an internal state" time="0.0000" classname="Property without decorators should be an internal state">
    </testcase>
  </testsuite>
  <testsuite name="Default_options" timestamp="2021-11-25T09:16:26" tests="5" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/react-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Default_options Add import convertRulesToOptions, DefaultOptionsRule" time="0.0000" classname="Add import convertRulesToOptions, DefaultOptionsRule">
    </testcase>
    <testcase name="Default_options Adding imports should not leads to duplicates" time="0.0000" classname="Adding imports should not leads to duplicates">
    </testcase>
    <testcase name="Default_options Import default_options if module doesn&apos;t import default_options" time="0.0000" classname="Import default_options if module doesn&apos;t import default_options">
    </testcase>
    <testcase name="Default_options Do not import default_options if defaultOptionRules is set to null" time="0.0000" classname="Do not import default_options if defaultOptionRules is set to null">
    </testcase>
    <testcase name="Default_options Do not generate DefaultOptionsMethod if defaultOptionRules parameter is null" time="0.0000" classname="Do not generate DefaultOptionsMethod if defaultOptionRules parameter is null">
    </testcase>
  </testsuite>
  <testsuite name="Store default_options import statement in context" timestamp="2021-11-25T09:16:26" tests="3" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/react-generator.test.ts" time="0.0010" failures="0">
    <testcase name="Default_options Store default_options import statement in context default_options in parent folder" time="0.0000" classname="default_options in parent folder">
    </testcase>
    <testcase name="Default_options Store default_options import statement in context default_options in same folder" time="0.0000" classname="default_options in same folder">
    </testcase>
    <testcase name="Default_options Store default_options import statement in context default_options in child folder" time="0.0010" classname="default_options in child folder">
    </testcase>
  </testsuite>
  <testsuite name="Import_Declaration" timestamp="2021-11-25T09:16:26" tests="1" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/react-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Import_Declaration generates import for RefObject" time="0.0000" classname="generates import for RefObject">
    </testcase>
  </testsuite>
  <testsuite name="vue-generation" timestamp="2021-11-25T09:16:26" tests="75" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generation.test.ts" time="1.1280" failures="0">
    <testcase name="vue-generation class" time="0.0110" classname="class">
    </testcase>
    <testcase name="vue-generation abstract-class" time="0.0040" classname="abstract-class">
    </testcase>
    <testcase name="vue-generation props" time="0.0250" classname="props">
    </testcase>
    <testcase name="vue-generation function-declaration" time="0.0030" classname="function-declaration">
    </testcase>
    <testcase name="vue-generation parent" time="0.0440" classname="parent">
    </testcase>
    <testcase name="vue-generation child" time="0.0090" classname="child">
    </testcase>
    <testcase name="vue-generation between_props" time="0.0070" classname="between_props">
    </testcase>
    <testcase name="vue-generation rest-styles" time="0.0230" classname="rest-styles">
    </testcase>
    <testcase name="vue-generation runtime-import" time="0.0030" classname="runtime-import">
    </testcase>
    <testcase name="vue-generation internal-state" time="0.0080" classname="internal-state">
    </testcase>
    <testcase name="vue-generation pick-props" time="0.0180" classname="pick-props">
    </testcase>
    <testcase name="vue-generation state" time="0.0240" classname="state">
    </testcase>
    <testcase name="vue-generation state-short-operator" time="0.0120" classname="state-short-operator">
    </testcase>
    <testcase name="vue-generation refs" time="0.0290" classname="refs">
    </testcase>
    <testcase name="vue-generation refs-as-props" time="0.0140" classname="refs-as-props">
    </testcase>
    <testcase name="vue-generation slots" time="0.0120" classname="slots">
    </testcase>
    <testcase name="vue-generation slot-pass-from-rest" time="0.0110" classname="slot-pass-from-rest">
    </testcase>
    <testcase name="vue-generation template" time="0.0450" classname="template">
    </testcase>
    <testcase name="vue-generation Throw error if ref is passed to template" time="0.0020" classname="Throw error if ref is passed to template">
    </testcase>
    <testcase name="vue-generation import-component" time="0.0130" classname="import-component">
    </testcase>
    <testcase name="vue-generation import-component-named" time="0.0100" classname="import-component-named">
    </testcase>
    <testcase name="vue-generation dx-inner-widget" time="0.0230" classname="dx-inner-widget">
    </testcase>
    <testcase name="vue-generation component-input" time="0.0090" classname="component-input">
    </testcase>
    <testcase name="vue-generation component-input-defaults" time="0.0530" classname="component-input-defaults">
    </testcase>
    <testcase name="vue-generation component-bindings-only" time="0.0070" classname="component-bindings-only">
    </testcase>
    <testcase name="vue-generation component-pass" time="0.0250" classname="component-pass">
    </testcase>
    <testcase name="vue-generation jsx-function-in-view" time="0.0120" classname="jsx-function-in-view">
    </testcase>
    <testcase name="vue-generation spread-attribute" time="0.0090" classname="spread-attribute">
    </testcase>
    <testcase name="vue-generation effect" time="0.0180" classname="effect">
    </testcase>
    <testcase name="vue-generation spread-attribute-with-custom-component" time="0.0100" classname="spread-attribute-with-custom-component">
    </testcase>
    <testcase name="vue-generation spread-props-attribute" time="0.0110" classname="spread-props-attribute">
    </testcase>
    <testcase name="vue-generation mutable-state" time="0.0140" classname="mutable-state">
    </testcase>
    <testcase name="vue-generation model-value-disabled" time="0.0120" classname="model-value-disabled">
    </testcase>
    <testcase name="vue-generation model" time="0.0120" classname="model">
    </testcase>
    <testcase name="vue-generation method" time="0.0100" classname="method">
    </testcase>
    <testcase name="vue-generation list" time="0.0440" classname="list">
    </testcase>
    <testcase name="vue-generation implements" time="0.0070" classname="implements">
    </testcase>
    <testcase name="vue-generation two-way-props" time="0.0090" classname="two-way-props">
    </testcase>
    <testcase name="vue-generation nested" time="0.0230" classname="nested">
    </testcase>
    <testcase name="vue-generation nested-props" time="0.0070" classname="nested-props">
    </testcase>
    <testcase name="vue-generation forward-ref-parent" time="0.0180" classname="forward-ref-parent">
    </testcase>
    <testcase name="vue-generation forward-ref-child" time="0.0110" classname="forward-ref-child">
    </testcase>
    <testcase name="vue-generation forward-ref-template" time="0.0170" classname="forward-ref-template">
    </testcase>
    <testcase name="vue-generation export-default" time="0.0050" classname="export-default">
    </testcase>
    <testcase name="vue-generation export-named" time="0.0050" classname="export-named">
    </testcase>
    <testcase name="vue-generation export-named-api-ref" time="0.0050" classname="export-named-api-ref">
    </testcase>
    <testcase name="vue-generation collision-tag-name-and-property" time="0.0080" classname="collision-tag-name-and-property">
    </testcase>
    <testcase name="vue-generation context" time="0.0120" classname="context">
    </testcase>
    <testcase name="vue-generation portal" time="0.0160" classname="portal">
    </testcase>
    <testcase name="vue-generation external-functions" time="0.0310" classname="external-functions">
    </testcase>
    <testcase name="vue-generation globals-in-template" time="0.0130" classname="globals-in-template">
    </testcase>
    <testcase name="vue-generation private" time="0.0060" classname="private">
    </testcase>
    <testcase name="vue-generation view-without-tag" time="0.0060" classname="view-without-tag">
    </testcase>
    <testcase name="vue-generation view-without-tag-arrow" time="0.0050" classname="view-without-tag-arrow">
    </testcase>
    <testcase name="vue-generation dynamic-component" time="0.0320" classname="dynamic-component">
    </testcase>
    <testcase name="vue-generation dynamic-components-array" time="0.0130" classname="dynamic-components-array">
    </testcase>
    <testcase name="vue-generation object-with-current" time="0.0070" classname="object-with-current">
    </testcase>
    <testcase name="vue-generation getters-is-memorized" time="0.0100" classname="getters-is-memorized">
    </testcase>
    <testcase name="vue-generation getters-ordering" time="0.0210" classname="getters-ordering">
    </testcase>
    <testcase name="vue-generation template-transit" time="0.0150" classname="template-transit">
    </testcase>
    <testcase name="vue-generation template-pass" time="0.0190" classname="template-pass">
    </testcase>
    <testcase name="vue-generation types" time="0.0170" classname="types">
    </testcase>
    <testcase name="vue-generation types-external" time="0.0080" classname="types-external">
    </testcase>
    <testcase name="vue-generation import-type" time="0.0080" classname="import-type">
    </testcase>
    <testcase name="vue-generation spread-in-view" time="0.0090" classname="spread-in-view">
    </testcase>
    <testcase name="vue-generation template-default-value" time="0.0270" classname="template-default-value">
    </testcase>
    <testcase name="vue-generation jsx-template-spread" time="0.0300" classname="jsx-template-spread">
    </testcase>
    <testcase name="vue-generation template-from-destructuring" time="0.0100" classname="template-from-destructuring">
    </testcase>
    <testcase name="vue-generation nested-default" time="0.0290" classname="nested-default">
    </testcase>
    <testcase name="vue-generation nested-default-props" time="0.0050" classname="nested-default-props">
    </testcase>
    <testcase name="vue-generation nested-pick" time="0.0060" classname="nested-pick">
    </testcase>
    <testcase name="vue-generation nested-props-and-component" time="0.0270" classname="nested-props-and-component">
    </testcase>
    <testcase name="vue-generation nested-inherited" time="0.0090" classname="nested-inherited">
    </testcase>
    <testcase name="vue-generation refs-as-attribute" time="0.0140" classname="refs-as-attribute">
    </testcase>
    <testcase name="vue-generation refs-as-attribute-helper" time="0.0120" classname="refs-as-attribute-helper">
    </testcase>
  </testsuite>
  <testsuite name="Default option rules" timestamp="2021-11-25T09:16:28" tests="5" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generation.test.ts" time="0.0470" failures="0">
    <testcase name="vue-generation Default option rules default-options-empty" time="0.0080" classname="default-options-empty">
    </testcase>
    <testcase name="vue-generation Default option rules required-props" time="0.0100" classname="required-props">
    </testcase>
    <testcase name="vue-generation Default option rules props-any-undefined-unknown" time="0.0100" classname="props-any-undefined-unknown">
    </testcase>
    <testcase name="vue-generation Default option rules use-external-component-bindings" time="0.0090" classname="use-external-component-bindings">
    </testcase>
    <testcase name="vue-generation Default option rules default-options-with-state" time="0.0100" classname="default-options-with-state">
    </testcase>
  </testsuite>
  <testsuite name="Vue-generator" timestamp="2021-11-25T09:16:28" tests="0" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Expressions" timestamp="2021-11-25T09:16:28" tests="1" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Vue-generator Expressions empty expression" time="0.0000" classname="empty expression">
    </testcase>
  </testsuite>
  <testsuite name="common" timestamp="2021-11-25T09:16:28" tests="2" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Vue-generator Expressions common NonNullExpression" time="0.0000" classname="NonNullExpression">
    </testcase>
    <testcase name="Vue-generator Expressions common createPropertyAccessChain" time="0.0000" classname="createPropertyAccessChain">
    </testcase>
  </testsuite>
  <testsuite name="Type expressions should generate empty string" timestamp="2021-11-25T09:16:28" tests="16" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Vue-generator Expressions Type expressions should generate empty string KeywordTypeNode" time="0.0000" classname="KeywordTypeNode">
    </testcase>
    <testcase name="Vue-generator Expressions Type expressions should generate empty string ArrayTypeNode" time="0.0000" classname="ArrayTypeNode">
    </testcase>
    <testcase name="Vue-generator Expressions Type expressions should generate empty string ArrayTypeNode" time="0.0000" classname="ArrayTypeNode">
    </testcase>
    <testcase name="Vue-generator Expressions Type expressions should generate empty string createLiteralTypeNode" time="0.0000" classname="createLiteralTypeNode">
    </testcase>
    <testcase name="Vue-generator Expressions Type expressions should generate empty string createIndexedAccessTypeNode" time="0.0000" classname="createIndexedAccessTypeNode">
    </testcase>
    <testcase name="Vue-generator Expressions Type expressions should generate empty string createIntersectionTypeNode" time="0.0000" classname="createIntersectionTypeNode">
    </testcase>
    <testcase name="Vue-generator Expressions Type expressions should generate empty string createUnionTypeNode" time="0.0000" classname="createUnionTypeNode">
    </testcase>
    <testcase name="Vue-generator Expressions Type expressions should generate empty string createParenthesizedType" time="0.0000" classname="createParenthesizedType">
    </testcase>
    <testcase name="Vue-generator Expressions Type expressions should generate empty string FunctionTypeNode" time="0.0000" classname="FunctionTypeNode">
    </testcase>
    <testcase name="Vue-generator Expressions Type expressions should generate empty string createTypeAliasDeclaration" time="0.0000" classname="createTypeAliasDeclaration">
    </testcase>
    <testcase name="Vue-generator Expressions Type expressions should generate empty string createTypeOperatorNode" time="0.0000" classname="createTypeOperatorNode">
    </testcase>
    <testcase name="Vue-generator Expressions Type expressions should generate empty string TypeReferenceNode" time="0.0000" classname="TypeReferenceNode">
    </testcase>
    <testcase name="Vue-generator Expressions Type expressions should generate empty string ArrowFunction with Token type should ignore it" time="0.0000" classname="ArrowFunction with Token type should ignore it">
    </testcase>
    <testcase name="Vue-generator Expressions Type expressions should generate empty string ArrowFunction with defined typeParameters should ignore it" time="0.0000" classname="ArrowFunction with defined typeParameters should ignore it">
    </testcase>
    <testcase name="Vue-generator Expressions Type expressions should generate empty string Function with Token type should ignore it" time="0.0000" classname="Function with Token type should ignore it">
    </testcase>
    <testcase name="Vue-generator Expressions Type expressions should generate empty string InterfaceDeclaration" time="0.0000" classname="InterfaceDeclaration">
    </testcase>
  </testsuite>
  <testsuite name="Enum" timestamp="2021-11-25T09:16:28" tests="3" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Vue-generator Expressions Enum member" time="0.0000" classname="member">
    </testcase>
    <testcase name="Vue-generator Expressions Enum declaration" time="0.0000" classname="declaration">
    </testcase>
    <testcase name="Vue-generator Expressions Enum empty declaration" time="0.0000" classname="empty declaration">
    </testcase>
  </testsuite>
  <testsuite name="Import declaration" timestamp="2021-11-25T09:16:28" tests="2" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Vue-generator Expressions Import declaration import .d module should be ignored" time="0.0000" classname="import .d module should be ignored">
    </testcase>
    <testcase name="Vue-generator Expressions Import declaration import type should be ignored" time="0.0000" classname="import type should be ignored">
    </testcase>
  </testsuite>
  <testsuite name="generic types should be ignored" timestamp="2021-11-25T09:16:28" tests="3" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0010" failures="0">
    <testcase name="Vue-generator Expressions generic types should be ignored createClassDeclaration generic class" time="0.0000" classname="createClassDeclaration generic class">
    </testcase>
    <testcase name="Vue-generator Expressions generic types should be ignored createClassDeclaration generic class with heritable" time="0.0000" classname="createClassDeclaration generic class with heritable">
    </testcase>
    <testcase name="Vue-generator Expressions generic types should be ignored create generic function with generic return" time="0.0010" classname="create generic function with generic return">
    </testcase>
  </testsuite>
  <testsuite name="Property" timestamp="2021-11-25T09:16:28" tests="0" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Props" timestamp="2021-11-25T09:16:28" tests="4" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0010" failures="0">
    <testcase name="Vue-generator Property Props Required property" time="0.0010" classname="Required property">
    </testcase>
    <testcase name="Vue-generator Property Props Property with initializer - number" time="0.0000" classname="Property with initializer - number">
    </testcase>
    <testcase name="Vue-generator Property Props Property with initializer - string" time="0.0000" classname="Property with initializer - string">
    </testcase>
    <testcase name="Vue-generator Property Props Property with initializer - function" time="0.0000" classname="Property with initializer - function">
    </testcase>
  </testsuite>
  <testsuite name="types" timestamp="2021-11-25T09:16:28" tests="12" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0020" failures="0">
    <testcase name="Vue-generator Property Props types Property with KeywordTypeNode" time="0.0000" classname="Property with KeywordTypeNode">
    </testcase>
    <testcase name="Vue-generator Property Props types Property with KeywordTypeNode - any" time="0.0000" classname="Property with KeywordTypeNode - any">
    </testcase>
    <testcase name="Vue-generator Property Props types Property with KeywordTypeNode - undefined" time="0.0000" classname="Property with KeywordTypeNode - undefined">
    </testcase>
    <testcase name="Vue-generator Property Props types Property with KeywordTypeNode - unknown" time="0.0000" classname="Property with KeywordTypeNode - unknown">
    </testcase>
    <testcase name="Vue-generator Property Props types Property with ArrayTypeNode" time="0.0000" classname="Property with ArrayTypeNode">
    </testcase>
    <testcase name="Vue-generator Property Props types Property with Function type" time="0.0000" classname="Property with Function type">
    </testcase>
    <testcase name="Vue-generator Property Props types Property with array as TypeReferenceNode" time="0.0000" classname="Property with array as TypeReferenceNode">
    </testcase>
    <testcase name="Vue-generator Property Props types Property with custom TypeReferenceNode" time="0.0010" classname="Property with custom TypeReferenceNode">
    </testcase>
    <testcase name="Vue-generator Property Props types Property with *Element type" time="0.0000" classname="Property with *Element type">
    </testcase>
    <testcase name="Vue-generator Property Props types Property has Boolean type without initializer" time="0.0010" classname="Property has Boolean type without initializer">
    </testcase>
    <testcase name="Vue-generator Property Props types Property has Boolean type with initializer" time="0.0000" classname="Property has Boolean type with initializer">
    </testcase>
    <testcase name="Vue-generator Property Props types Property without type" time="0.0000" classname="Property without type">
    </testcase>
  </testsuite>
  <testsuite name="Property with LiteralTypeNode" timestamp="2021-11-25T09:16:28" tests="3" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Vue-generator Property Props types Property with LiteralTypeNode Object" time="0.0000" classname="Object">
    </testcase>
    <testcase name="Vue-generator Property Props types Property with LiteralTypeNode string" time="0.0000" classname="string">
    </testcase>
    <testcase name="Vue-generator Property Props types Property with LiteralTypeNode number" time="0.0000" classname="number">
    </testcase>
  </testsuite>
  <testsuite name="Union" timestamp="2021-11-25T09:16:28" tests="4" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0010" failures="0">
    <testcase name="Vue-generator Property Props types Union Property with Union type" time="0.0000" classname="Property with Union type">
    </testcase>
    <testcase name="Vue-generator Property Props types Union Property with Union type with undefined" time="0.0000" classname="Property with Union type with undefined">
    </testcase>
    <testcase name="Vue-generator Property Props types Union type should not have duplicates" time="0.0010" classname="type should not have duplicates">
    </testcase>
    <testcase name="Vue-generator Property Props types Union type should be an array if only one type in the union" time="0.0000" classname="type should be an array if only one type in the union">
    </testcase>
  </testsuite>
  <testsuite name="Slots" timestamp="2021-11-25T09:16:28" tests="3" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Vue-generator Property Props Slots default slot" time="0.0000" classname="default slot">
    </testcase>
    <testcase name="Vue-generator Property Props Slots default slot" time="0.0000" classname="default slot">
    </testcase>
    <testcase name="Vue-generator Property Props Slots children slot" time="0.0000" classname="children slot">
    </testcase>
  </testsuite>
  <testsuite name="Template" timestamp="2021-11-25T09:16:28" tests="2" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Vue-generator Property Props Template Template props toString should return default value and do not return undefined" time="0.0000" classname="Template props toString should return default value and do not return undefined">
    </testcase>
    <testcase name="Vue-generator Property Props Template Template props toString should return default value and default Template Object" time="0.0000" classname="Template props toString should return default value and default Template Object">
    </testcase>
  </testsuite>
  <testsuite name="Internal state" timestamp="2021-11-25T09:16:28" tests="2" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0010" failures="0">
    <testcase name="Vue-generator Property Internal state without initializer" time="0.0000" classname="without initializer">
    </testcase>
    <testcase name="Vue-generator Property Internal state with initializer" time="0.0010" classname="with initializer">
    </testcase>
  </testsuite>
  <testsuite name="Event" timestamp="2021-11-25T09:16:28" tests="1" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Vue-generator Property Event toString should return empty string" time="0.0000" classname="toString should return empty string">
    </testcase>
  </testsuite>
  <testsuite name="Refs" timestamp="2021-11-25T09:16:28" tests="2" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Vue-generator Property Refs toString should return empty string" time="0.0000" classname="toString should return empty string">
    </testcase>
    <testcase name="Vue-generator Property Refs getter" time="0.0000" classname="getter">
    </testcase>
  </testsuite>
  <testsuite name="Call" timestamp="2021-11-25T09:16:28" tests="7" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0010" failures="0">
    <testcase name="Vue-generator Call Call with typeParameter" time="0.0000" classname="Call with typeParameter">
    </testcase>
    <testcase name="Vue-generator Call CallChain with typeParameter" time="0.0000" classname="CallChain with typeParameter">
    </testcase>
    <testcase name="Vue-generator Call Call expression generates usual call if not event" time="0.0010" classname="Call expression generates usual call if not event">
    </testcase>
    <testcase name="Vue-generator Call Call expression generates emit if call Event" time="0.0000" classname="Call expression generates emit if call Event">
    </testcase>
    <testcase name="Vue-generator Call CallChain expression generates emit if call Event" time="0.0000" classname="CallChain expression generates emit if call Event">
    </testcase>
    <testcase name="Vue-generator Call CallChain Identifer that is call event" time="0.0000" classname="CallChain Identifer that is call event">
    </testcase>
    <testcase name="Vue-generator Call CallChain expression generates usual call if not event" time="0.0000" classname="CallChain expression generates usual call if not event">
    </testcase>
  </testsuite>
  <testsuite name="Methods" timestamp="2021-11-25T09:16:28" tests="4" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Vue-generator Methods Method with options" time="0.0000" classname="Method with options">
    </testcase>
    <testcase name="Vue-generator Methods Method with parameters" time="0.0000" classname="Method with parameters">
    </testcase>
    <testcase name="Vue-generator Methods Parameter with spread" time="0.0000" classname="Parameter with spread">
    </testcase>
    <testcase name="Vue-generator Methods GetAccessor" time="0.0000" classname="GetAccessor">
    </testcase>
  </testsuite>
  <testsuite name="Abstract method" timestamp="2021-11-25T09:16:28" tests="3" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0010" failures="0">
    <testcase name="Vue-generator Methods Abstract method abstract method with modifier and without body" time="0.0000" classname="abstract method with modifier and without body">
    </testcase>
    <testcase name="Vue-generator Methods Abstract method abstract method without modifier and without body" time="0.0000" classname="abstract method without modifier and without body">
    </testcase>
    <testcase name="Vue-generator Methods Abstract method abstract method with modifier and body" time="0.0010" classname="abstract method with modifier and body">
    </testcase>
  </testsuite>
  <testsuite name="Template" timestamp="2021-11-25T09:16:28" tests="0" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="View Function" timestamp="2021-11-25T09:16:28" tests="7" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0020" failures="0">
    <testcase name="Vue-generator Template View Function Function that returns jsx converts to empty string" time="0.0000" classname="Function that returns jsx converts to empty string">
    </testcase>
    <testcase name="Vue-generator Template View Function ArrowFunction that returns jsx converts to empty string" time="0.0000" classname="ArrowFunction that returns jsx converts to empty string">
    </testcase>
    <testcase name="Vue-generator Template View Function skip jsx function from variable declaration" time="0.0000" classname="skip jsx function from variable declaration">
    </testcase>
    <testcase name="Vue-generator Template View Function Can use jsx variable twice. Self-closing element should be cloned correctly" time="0.0000" classname="Can use jsx variable twice. Self-closing element should be cloned correctly">
    </testcase>
    <testcase name="Vue-generator Template View Function Can use jsx variable twice. jsx element should be cloned correctly" time="0.0010" classname="Can use jsx variable twice. jsx element should be cloned correctly">
    </testcase>
    <testcase name="Vue-generator Template View Function Wrap single template in fragment. Function" time="0.0000" classname="Wrap single template in fragment. Function">
    </testcase>
    <testcase name="Vue-generator Template View Function Wrap single template in fragment. ArrowFunction" time="0.0010" classname="Wrap single template in fragment. ArrowFunction">
    </testcase>
  </testsuite>
  <testsuite name="Component Input" timestamp="2021-11-25T09:16:28" tests="2" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0010" failures="0">
    <testcase name="Vue-generator Component Input Component Binding should be an object" time="0.0000" classname="Component Binding should be an object">
    </testcase>
    <testcase name="Vue-generator Component Input ComponentBindings with heritage clauses" time="0.0010" classname="ComponentBindings with heritage clauses">
    </testcase>
  </testsuite>
  <testsuite name="Component" timestamp="2021-11-25T09:16:28" tests="0" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Compile Effects" timestamp="2021-11-25T09:16:28" tests="4" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0020" failures="0">
    <testcase name="Vue-generator Component Compile Effects should add watch for properties in dependency" time="0.0000" classname="should add watch for properties in dependency">
    </testcase>
    <testcase name="Vue-generator Component Compile Effects should watch all props if props in dependency" time="0.0000" classname="should watch all props if props in dependency">
    </testcase>
    <testcase name="Vue-generator Component Compile Effects should not generate watch if there is not any dependency" time="0.0010" classname="should not generate watch if there is not any dependency">
    </testcase>
    <testcase name="Vue-generator Component Compile Effects two effect have same dependency" time="0.0010" classname="two effect have same dependency">
    </testcase>
  </testsuite>
  <testsuite name="template" timestamp="2021-11-25T09:16:28" tests="1" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0010" failures="0">
    <testcase name="Vue-generator Component template pass isSvg to template options" time="0.0010" classname="pass isSvg to template options">
    </testcase>
  </testsuite>
  <testsuite name="Template Generation" timestamp="2021-11-25T09:16:28" tests="0" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Elements" timestamp="2021-11-25T09:16:28" tests="7" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Vue-generator Template Generation Elements Self-closing element" time="0.0000" classname="Self-closing element">
    </testcase>
    <testcase name="Vue-generator Template Generation Elements element" time="0.0000" classname="element">
    </testcase>
    <testcase name="Vue-generator Template Generation Elements Element with two children: should not be any whitespace symbols between elements" time="0.0000" classname="Element with two children: should not be any whitespace symbols between elements">
    </testcase>
    <testcase name="Vue-generator Template Generation Elements element with attributes" time="0.0000" classname="element with attributes">
    </testcase>
    <testcase name="Vue-generator Template Generation Elements JsxAttribute without initializer" time="0.0000" classname="JsxAttribute without initializer">
    </testcase>
    <testcase name="Vue-generator Template Generation Elements JsxSpreadAttribute replace &quot; -&gt; &apos;" time="0.0000" classname="JsxSpreadAttribute replace &quot; -&gt; &apos;">
    </testcase>
    <testcase name="Vue-generator Template Generation Elements render element from variable" time="0.0000" classname="render element from variable">
    </testcase>
  </testsuite>
  <testsuite name="Attributes" timestamp="2021-11-25T09:16:28" tests="7" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Vue-generator Template Generation Elements Attributes title attribute" time="0.0000" classname="title attribute">
    </testcase>
    <testcase name="Vue-generator Template Generation Elements Attributes style -&gt; v-bind:style" time="0.0000" classname="style -&gt; v-bind:style">
    </testcase>
    <testcase name="Vue-generator Template Generation Elements Attributes className -&gt; v-bind:class" time="0.0000" classname="className -&gt; v-bind:class">
    </testcase>
    <testcase name="Vue-generator Template Generation Elements Attributes className -&gt; class" time="0.0000" classname="className -&gt; class">
    </testcase>
    <testcase name="Vue-generator Template Generation Elements Attributes Parse style with options should fill hasClass" time="0.0000" classname="Parse style with options should fill hasClass">
    </testcase>
    <testcase name="Vue-generator Template Generation Elements Attributes camelCase-&gt;camel-case for kebab attributes" time="0.0000" classname="camelCase-&gt;camel-case for kebab attributes">
    </testcase>
    <testcase name="Vue-generator Template Generation Elements Attributes camelCase-&gt;camelCase for not-kebab-case attribute" time="0.0000" classname="camelCase-&gt;camelCase for not-kebab-case attribute">
    </testcase>
  </testsuite>
  <testsuite name="Fragment" timestamp="2021-11-25T09:16:28" tests="2" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Vue-generator Template Generation Elements Fragment Fragment -&gt; div" time="0.0000" classname="Fragment -&gt; div">
    </testcase>
    <testcase name="Vue-generator Template Generation Elements Fragment svg: Fragment -&gt; g" time="0.0000" classname="svg: Fragment -&gt; g">
    </testcase>
  </testsuite>
  <testsuite name="Conditional Rendering" timestamp="2021-11-25T09:16:28" tests="6" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0010" failures="0">
    <testcase name="Vue-generator Template Generation Conditional Rendering notJsxExpr &amp;&amp; &lt;element&gt;&lt;/element&gt; -&gt; &lt;element v-if=&apos;notJsxExpr&apos;&gt;&lt;/element&gt;" time="0.0000" classname="notJsxExpr &amp;&amp; &lt;element&gt;&lt;/element&gt; -&gt; &lt;element v-if=&apos;notJsxExpr&apos;&gt;&lt;/element&gt;">
    </testcase>
    <testcase name="Vue-generator Template Generation Conditional Rendering notJsxExpr &amp;&amp; &lt;element/&gt; -&gt; &lt;element v-if=&apos;notJsxExpr&apos;&gt;" time="0.0000" classname="notJsxExpr &amp;&amp; &lt;element/&gt; -&gt; &lt;element v-if=&apos;notJsxExpr&apos;&gt;">
    </testcase>
    <testcase name="Vue-generator Template Generation Conditional Rendering condition?then:else - &lt;div v-if=&apos;condition&apos;&gt; &lt;div v-else&gt;" time="0.0000" classname="condition?then:else - &lt;div v-if=&apos;condition&apos;&gt; &lt;div v-else&gt;">
    </testcase>
    <testcase name="Vue-generator Template Generation Conditional Rendering non jsx conditional - condition?then:else - {{then}} {{else}}&apos;" time="0.0000" classname="non jsx conditional - condition?then:else - {{then}} {{else}}&apos;">
    </testcase>
    <testcase name="Vue-generator Template Generation Conditional Rendering condition?&lt;element&gt;:expr - &lt;element&gt;&lt;template&gt;{expr}&lt;/template&gt;&apos;" time="0.0010" classname="condition?&lt;element&gt;:expr - &lt;element&gt;&lt;template&gt;{expr}&lt;/template&gt;&apos;">
    </testcase>
    <testcase name="Vue-generator Template Generation Conditional Rendering Condition with identifer that point to element" time="0.0000" classname="Condition with identifer that point to element">
    </testcase>
  </testsuite>
  <testsuite name="Slots with conditional rendering" timestamp="2021-11-25T09:16:28" tests="2" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0010" failures="0">
    <testcase name="Vue-generator Template Generation Conditional Rendering Slots with conditional rendering slot? slot: alternative content" time="0.0010" classname="slot? slot: alternative content">
    </testcase>
    <testcase name="Vue-generator Template Generation Conditional Rendering Slots with conditional rendering render slot if template is not exist" time="0.0000" classname="render slot if template is not exist">
    </testcase>
  </testsuite>
  <testsuite name="Parse Map function" timestamp="2021-11-25T09:16:28" tests="7" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0010" failures="0">
    <testcase name="Vue-generator Template Generation Parse Map function .map((item)=&gt;&lt;div&gt;) -&gt; v-for" time="0.0010" classname=".map((item)=&gt;&lt;div&gt;) -&gt; v-for">
    </testcase>
    <testcase name="Vue-generator Template Generation Parse Map function .map((item)=&gt;item) -&gt; *ngFor" time="0.0000" classname=".map((item)=&gt;item) -&gt; *ngFor">
    </testcase>
    <testcase name="Vue-generator Template Generation Parse Map function .map((item)=&gt;{}) -&gt; empty string" time="0.0000" classname=".map((item)=&gt;{}) -&gt; empty string">
    </testcase>
    <testcase name="Vue-generator Template Generation Parse Map function .map((item, index)=&gt;&lt;div&gt;) -&gt; v-for=&apos;(item, index) of items&apos;" time="0.0000" classname=".map((item, index)=&gt;&lt;div&gt;) -&gt; v-for=&apos;(item, index) of items&apos;">
    </testcase>
    <testcase name="Vue-generator Template Generation Parse Map function map with key attribute" time="0.0000" classname="map with key attribute">
    </testcase>
    <testcase name="Vue-generator Template Generation Parse Map function map inside an other map" time="0.0000" classname="map inside an other map">
    </testcase>
    <testcase name="Vue-generator Template Generation Parse Map function Parse map with destruction" time="0.0000" classname="Parse map with destruction">
    </testcase>
  </testsuite>
  <testsuite name="Template" timestamp="2021-11-25T09:16:28" tests="5" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Vue-generator Template Generation Template &lt;template/&gt; -&gt; &lt;slot&gt;&lt;/slot&gt;" time="0.0000" classname="&lt;template/&gt; -&gt; &lt;slot&gt;&lt;/slot&gt;">
    </testcase>
    <testcase name="Vue-generator Template Generation Template Template with parameters" time="0.0000" classname="Template with parameters">
    </testcase>
    <testcase name="Vue-generator Template Generation Template &lt;template&gt;&lt;/template&gt; -&gt; &lt;slot&gt;&lt;/slot&gt;" time="0.0000" classname="&lt;template&gt;&lt;/template&gt; -&gt; &lt;slot&gt;&lt;/slot&gt;">
    </testcase>
    <testcase name="Vue-generator Template Generation Template Template with spread attribute" time="0.0000" classname="Template with spread attribute">
    </testcase>
    <testcase name="Vue-generator Template Generation Template Template with condition" time="0.0000" classname="Template with condition">
    </testcase>
  </testsuite>
  <testsuite name="Slot" timestamp="2021-11-25T09:16:28" tests="2" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Vue-generator Template Generation Slot children slot is default" time="0.0000" classname="children slot is default">
    </testcase>
    <testcase name="Vue-generator Template Generation Slot named slot" time="0.0000" classname="named slot">
    </testcase>
  </testsuite>
  <testsuite name="Dynamic Components" timestamp="2021-11-25T09:16:28" tests="9" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0020" failures="0">
    <testcase name="Vue-generator Template Generation Dynamic Components &lt;DynamicComponent/&gt; -&gt; &lt;component/&gt;" time="0.0000" classname="&lt;DynamicComponent/&gt; -&gt; &lt;component/&gt;">
    </testcase>
    <testcase name="Vue-generator Template Generation Dynamic Components &lt;DynamicComponent&gt;&lt;/DynamicComponent&gt; -&gt; &lt;component&gt;&lt;/component&gt;" time="0.0000" classname="&lt;DynamicComponent&gt;&lt;/DynamicComponent&gt; -&gt; &lt;component&gt;&lt;/component&gt;">
    </testcase>
    <testcase name="Vue-generator Template Generation Dynamic Components &lt;DynamicComponent&gt;&lt;/DynamicComponent&gt; -&gt; &lt;component&gt;&lt;/component&gt;" time="0.0000" classname="&lt;DynamicComponent&gt;&lt;/DynamicComponent&gt; -&gt; &lt;component&gt;&lt;/component&gt;">
    </testcase>
    <testcase name="Vue-generator Template Generation Dynamic Components &lt;DynamicComponent&gt;&lt;span/&gt;&lt;/DynamicComponent&gt; -&gt; &lt;component&gt;&lt;/component&gt;" time="0.0000" classname="&lt;DynamicComponent&gt;&lt;span/&gt;&lt;/DynamicComponent&gt; -&gt; &lt;component&gt;&lt;/component&gt;">
    </testcase>
    <testcase name="Vue-generator Template Generation Dynamic Components &lt;DynamicComponent prop={value}&gt;&lt;/DynamicComponent&gt; -&gt; &lt;component :props=&apos;value&apos;&gt;&lt;/component&gt;" time="0.0010" classname="&lt;DynamicComponent prop={value}&gt;&lt;/DynamicComponent&gt; -&gt; &lt;component :props=&apos;value&apos;&gt;&lt;/component&gt;">
    </testcase>
    <testcase name="Vue-generator Template Generation Dynamic Components &lt;DynamicComponent template={()=&gt;&lt;div/&gt;}&gt;&lt;/DynamicComponent&gt; -&gt; &lt;component&gt;&lt;template&gt;&lt;/component&gt;" time="0.0010" classname="&lt;DynamicComponent template={()=&gt;&lt;div/&gt;}&gt;&lt;/DynamicComponent&gt; -&gt; &lt;component&gt;&lt;template&gt;&lt;/component&gt;">
    </testcase>
    <testcase name="Vue-generator Template Generation Dynamic Components &lt;DynamicComponent template={()=&gt;&lt;div/&gt;}/&gt; -&gt; &lt;component&gt;&lt;template&gt;&lt;/component&gt;" time="0.0000" classname="&lt;DynamicComponent template={()=&gt;&lt;div/&gt;}/&gt; -&gt; &lt;component&gt;&lt;template&gt;&lt;/component&gt;">
    </testcase>
    <testcase name="Vue-generator Template Generation Dynamic Components condition &amp;&amp; &lt;DynamicComponent /&gt; -&gt; &lt;component v-if=&apos;condition&apos;&gt;" time="0.0000" classname="condition &amp;&amp; &lt;DynamicComponent /&gt; -&gt; &lt;component v-if=&apos;condition&apos;&gt;">
    </testcase>
    <testcase name="Vue-generator Template Generation Dynamic Components map &lt;DynamicComponent /&gt;" time="0.0000" classname="map &lt;DynamicComponent /&gt;">
    </testcase>
  </testsuite>
  <testsuite name="Import widget." timestamp="2021-11-25T09:16:28" tests="4" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Vue-generator Template Generation Import widget. &lt;DxWidget&gt;&lt;/DxWidget&gt; -&gt; &lt;dx-widget&gt;&lt;/dx-widget&gt;" time="0.0000" classname="&lt;DxWidget&gt;&lt;/DxWidget&gt; -&gt; &lt;dx-widget&gt;&lt;/dx-widget&gt;">
    </testcase>
    <testcase name="Vue-generator Template Generation Import widget. &lt;DxWidget/&gt; -&gt; &lt;dx-widget/&gt;" time="0.0000" classname="&lt;DxWidget/&gt; -&gt; &lt;dx-widget/&gt;">
    </testcase>
    <testcase name="Vue-generator Template Generation Import widget. Process eventChange - @event-change" time="0.0000" classname="Process eventChange - @event-change">
    </testcase>
    <testcase name="Vue-generator Template Generation Import widget. Process statePropChange - @update:state-prop if stateProp is TwoWay prop" time="0.0000" classname="Process statePropChange - @update:state-prop if stateProp is TwoWay prop">
    </testcase>
  </testsuite>
  <testsuite name="Pass slots via attribute" timestamp="2021-11-25T09:16:28" tests="4" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0020" failures="0">
    <testcase name="Vue-generator Template Generation Import widget. Pass slots via attribute Self-closing element" time="0.0010" classname="Self-closing element">
    </testcase>
    <testcase name="Vue-generator Template Generation Import widget. Pass slots via attribute Self-closing element with two slots" time="0.0000" classname="Self-closing element with two slots">
    </testcase>
    <testcase name="Vue-generator Template Generation Import widget. Pass slots via attribute spread props with slot" time="0.0000" classname="spread props with slot">
    </testcase>
    <testcase name="Vue-generator Template Generation Import widget. Pass slots via attribute element with closing tag" time="0.0010" classname="element with closing tag">
    </testcase>
  </testsuite>
  <testsuite name="Pass Widget to template property" timestamp="2021-11-25T09:16:28" tests="2" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/vue-generator.test.ts" time="0.0000" failures="0">
    <testcase name="Vue-generator Template Generation Import widget. Pass Widget to template property Pass widget into template. self-closing element" time="0.0000" classname="Pass widget into template. self-closing element">
    </testcase>
    <testcase name="Vue-generator Template Generation Import widget. Pass Widget to template property Pass widget into template. Element" time="0.0000" classname="Pass widget into template. Element">
    </testcase>
  </testsuite>
  <testsuite name="webpack-loader" timestamp="2021-11-25T09:16:28" tests="0" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/webpack-loader.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="platforms" timestamp="2021-11-25T09:16:28" tests="6" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/webpack-loader.test.ts" time="1.4720" failures="0">
    <testcase name="webpack-loader platforms unknown platform - throw exception" time="0.5930" classname="unknown platform - throw exception">
    </testcase>
    <testcase name="webpack-loader platforms preact" time="0.1840" classname="preact">
    </testcase>
    <testcase name="webpack-loader platforms react" time="0.1700" classname="react">
    </testcase>
    <testcase name="webpack-loader platforms angular" time="0.1690" classname="angular">
    </testcase>
    <testcase name="webpack-loader platforms vue" time="0.1840" classname="vue">
    </testcase>
    <testcase name="webpack-loader platforms inferno" time="0.1720" classname="inferno">
    </testcase>
  </testsuite>
  <testsuite name="with ts-compilation" timestamp="2021-11-25T09:16:29" tests="4" file="/Users/vladislavvolkov/Documents/work/github/devextreme-renovation/packages/tests/unit-tests/webpack-loader.test.ts" time="0.7220" failures="0">
    <testcase name="webpack-loader with ts-compilation can set tsconfig" time="0.1740" classname="can set tsconfig">
    </testcase>
    <testcase name="webpack-loader with ts-compilation ignore ts errors" time="0.1690" classname="ignore ts errors">
    </testcase>
    <testcase name="webpack-loader with ts-compilation tsconfig error - use default" time="0.2090" classname="tsconfig error - use default">
    </testcase>
    <testcase name="webpack-loader with ts-compilation tsconfig with extend - merge compiler options" time="0.1700" classname="tsconfig with extend - merge compiler options">
    </testcase>
  </testsuite>
</testsuites>